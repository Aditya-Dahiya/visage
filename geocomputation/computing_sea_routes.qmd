---
title: "Computing shortest routes in the sea that avoid land"
subtitle: "................."
date: "2024-10-18"
author: "Aditya Dahiya"
bibliography: references.bib
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/visage/geocomputation/computing_sea_routes.html"
  description: "Visualizing Information and Spatial Analysis with ggplot2 Extensions"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
  facebook: true
---

**Dataset used:** This *#TidyTuesday* dataset comes from the Center for Whale Research (CWR), which monitors Southern Resident killer whales in the Salish Sea, part of the Pacific Northwest. The dataset, scraped by [Jadey Ryan](https://github.com/jadeynryan) and documented [here](https://jadeynryan.github.io/orcas/), contains information on encounters from 2017 to 2024. Each encounter involves photographing and identifying individual whales. The data can be accessed via the {`orcas`} R package and includes variables like encounter duration, location, and pod. While the dataset is mostly tidy, some inconsistencies such as missing values and negative durations remain. **\|** [Source](https://github.com/jadeynryan/orcas) **\|** [Data](https://github.com/rfordatascience/tidytuesday/blob/master/data/2024/2024-10-15/readme.md)

**Code Inspiration for computing sea routes:** [Code](https://raw.githubusercontent.com/BjnNowak/TidyTuesday/refs/heads/main/orcas.R) by [Benjamin Nowak](https://twitter.com/BjnNowak) hosted on [GitHub](https://github.com/BjnNowak) as a part of [*#TidyTuesday*](https://github.com/rfordatascience/tidytuesday/tree/master) visualizations.

Step 1: Getting the data and cleaning it

```{r}
#| label: setup

# Loading the Libraries
library(tidyverse)       # Data wrangling
library(rgeoboundaries)  # Getting country & admin boundaries.
library(rmapshaper)      # For multi-polygon simplification
library(sf)              # SF objects
library(terra)           # Spatial data analysis
library(tidyterra)       # Tidyverse methods for terra objects
library(gdistance)       # Distances and Routes on Geographical Grids
library(showtext)        # Using google fonts in R

# Set fonts for including in all graphics
font_add_google("Saira Semi Condensed", "body_font")
font_add_google("Saira Extra Condensed","caption_font")
showtext_auto()

# Load orcas data
orcas <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-10-15/orcas.csv')



```

```{r}
library(tidyverse)       # Data wrangling
library(rgeoboundaries)  # Getting country & admin boundaries.
library(rmapshaper)      # For multi-polygon simplification
library(sf)              # SF objects
library(terra)           # Spatial data analysis
library(tidyterra)       # Tidyverse methods for terra objects
library(gdistance)       # Distances and Routes on Geographical Grids
library(showtext)        # Using google fonts in R

# Set fonts
font_add_google("Fira Sans Extra Condensed","cond")
font_add_google("Fira Sans","fira")
font_add_google("Raleway","ral")
font_add_google("Bitter","bit")
showtext_auto()

# Load orcas data
orcas <- readr::read_csv(
  'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-10-15/orcas.csv'
)
  
# A cleaner tibble to use for our visualization
df1 <- orcas |> 
  as_tibble() |>
  dplyr::select(year, duration, 
         begin_latitude, begin_longitude,
         end_latitude, end_longitude) |> 

  # Convert the duration of encounter into seconds
  mutate(
    # remove parenthesis content from duration
    duration = str_remove(duration, "\\s*\\(.*\\)"),
    
    # remove the "s" for seconds
    duration = str_extract(duration, "-?\\d+"),
    
    # convert the duration into number
    duration = as.numeric(duration)
  ) |> 
  
  # Remove aberrant observation with durations less than zero
  filter(duration >= 0) |> 
  
  # Remove observations with missingness
  drop_na() |> 
  
  # Allot an ID number to each finally selected observation
  mutate(id = row_number())


start_coordinates <- df1 |> 
  dplyr::select(id, begin_latitude, begin_longitude) |> 
  sf::st_as_sf(
    coords = c("begin_longitude","begin_latitude"),
    crs='EPSG:4326'
  )
  


# ==============================================
  
  
start <- clean%>%
  mutate(pos = "start")%>%
  dplyr::select(id,pos,begin_longitude,begin_latitude)%>%
  sf::st_as_sf(coords = c("begin_longitude","begin_latitude"),crs='EPSG:4326')%>%
  dplyr::select(id,pos) 

end <- clean %>%
  mutate(pos="end") %>%
  dplyr::select(id,pos,end_longitude,end_latitude)%>%
  sf::st_as_sf(coords = c("end_longitude","end_latitude"),crs='EPSG:4326')%>%
  dplyr::select(id,pos)

orcas_sf<-start%>%
  bind_rows(end)

# Extract bounding box
bb <- st_bbox(orcas_sf)

#############################################################################

# Extract country borders data
us_ca_map <- rgeoboundaries::gb_adm0(country = c("USA", "Canada")) %>% 
  rmapshaper::ms_simplify(0.5)

object.size(us_ca_map) |> print(units = "Mb")

ggplot(sea) +
  geom_sf()

# Crop countries by orcas bb
sea <- crop(vect(us_ca_map),bb)

# Convert to sf
sea_sf<-sea%>%st_as_sf()

ggplot(sea_sf) +
  geom_sf()

# Convert vector to raster and set highly diffferent pixel values based on sea/ not sea
r <- rast(sea_sf, ncols=500, nrows=500)

ggplot() +
  geom_spatraster(data = r)

rr <-rasterize(sea_sf, r, "shapeISO")%>%
  mutate(shapeISO=case_when(
    shapeISO%in%c('CAN','USA')~1,
    TRUE~1000
  ))

ggplot()+
  geom_spatraster(data=rr)

# Compute transition matrix from raster pixels
r_trans <- gdistance::transition(
  raster(rr), 
  transitionFunction=mean, 
  directions = 16
)

r_trans <- geoCorrection(r_trans)

# Shortest path between start and end for the first line:
distance <- gdistance::shortestPath(
  r_trans, 
  c(clean%>%filter(id==1)%>%pull(begin_longitude),
    clean%>%filter(id==1)%>%pull(begin_latitude)), 
  c(clean%>%filter(id==1)%>%pull(end_longitude),
    clean%>%filter(id==1)%>%pull(end_latitude)), 
  output = "SpatialLines"
) %>%
  st_as_sf()

# Same for the other lines
for (i in 2:dim(clean)[1]) {
  
  temp <- shortestPath(
    r_trans, 
    c(clean%>%filter(id==i)%>%pull(begin_longitude),clean%>%filter(id==i)%>%pull(begin_latitude)), 
    c(clean%>%filter(id==i)%>%pull(end_longitude),clean%>%filter(id==i)%>%pull(end_latitude)), 
    output = "SpatialLines"
  )%>%
    st_as_sf()
  
  distance<-distance%>%
    bind_rows(temp)

}

distance2 <- distance |> 
  st_set_crs(st_crs(us_ca_map))
  
ggplot() +
  geom_sf(
    data = distance2
  ) +
  geom_sf(data = sea_sf, alpha = 0.5, fill = "brown")

# Test if path is only sea
tst <- lengths(st_intersects(distance2, us_ca_map)) > 0

# compute distance
dist <- st_length(distance)


distance_clean <- distance2 %>%
  bind_cols(id = start %>% pull(id)) %>%
  bind_cols(inter=tst) %>%
  bind_cols(dist=as.numeric(dist)) %>%
  filter(tst==F)

id_clean<-distance_clean%>%
  pull(id)

land <- '#00171F'
sea <- '#007EA7'
orc <- '#FCBF49'

ggplot()+
  geom_sf(
    data=us_ca_map,
    mapping=aes(geometry=geometry),
    fill=land, color=NA
  )+
  geom_sf(
    distance_clean,
    mapping=aes(alpha=dist,geometry=geometry),
    color=orc
  )+
  annotate(
    "text",
    x=bb$xmin, y=bb$ymin+0.07,
    label="Orcas movement in the Salish Sea",
    vjust=0, hjust=0, size=12,
    color=orc, family="ral", fontface='bold'
  )+
  annotate(
    "text",
    x=bb$xmin, y=bb$ymin,
    label="Data Center for Whale Research | Plot Benjamin Nowak",
    vjust=0, hjust=0, size=6,
    color="white", family="fira"
  )+
  coord_sf(
    xlim = c(bb$xmin, bb$xmax + 0.3), ylim = c(bb$ymin, bb$ymax - 0.8)
  )+
  scale_alpha(range=c(0.25,0.8))+
  guides(alpha='none')+
  theme_void()+
  theme(
    plot.background = element_rect(fill = sea, color=NA)
  )
```
