---
title: "Chapter 3: Attribute data operations"
subtitle: "Key Learnings from, and Solutions to the exercises in Chapter 3 of the book Geocomputation with R by Robin Lovelace, Jakub Nowosad and Jannes Muenchow."
date: "2024-11-08"
author: "Aditya Dahiya"
bibliography: references.bib
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: true
  cache: true
categories:
  - "Geocomputation with R"
  - "Textbook Solutions"
comments:
  giscus: 
    repo: Aditya-Dahiya/visage
filters:
  - social-share
  - custom-callout
custom-callout:    
  keylearning:
    icon: false
    title: "Relevant Topic"
    color: "#f0b3ff"
share:
  permalink: "https://aditya-dahiya.github.io/visage/geocomputation/chapter3.html"
  description: "Visualizing Information and Spatial Analysis with ggplot2 Extensions"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
  facebook: true
---

### Prerequisites

-   `sf` for vector data manipulation ([link](https://r-spatial.github.io/sf/))
-   `terra` for raster data manipulation ([link](https://rspatial.org/terra/))
-   `dplyr` for data frame operations ([link](https://dplyr.tidyverse.org/))
-   `spData` for example datasets ([link](https://cran.r-project.org/web/packages/spData/index.html))

## 3.1 Introduction

-   **Attribute Data**: Non-spatial info tied to geographic data (e.g., bus stop name or elevation).
    -   **Vector Example**: A bus stop's location as POINT (-0.098 51.495) with attributes like its name.
    -   **Raster Example**: Pixel values represent attributes (e.g., elevation); location defined by matrix indices and resolution.
-   **Chapter Focus**:
    -   Manipulating geographic objects using attributes (e.g., names, elevations).
    -   Techniques: subsetting, aggregation, joining data, creating new variables.
    -   Vector and raster data operations are similar and interchangeable (e.g., subsetting, spatial joins).

```{r}
#| label: setup

library(sf)        # Handling Simple Features in R
library(terra)     # Handling Rasters in R
library(tidyverse) # Data Wrangling

library(spData)    # Spatial Data-sets
```

## 3.2 Vector Attribute Manipulation

-   **`sf` Package**:

    -   Extends base R's `data.frame` with a geometry column (`sfc` class) for spatial features (points, lines, polygons).
    -   Geometry column often named `geometry` or `geom`, but **customizable**.

-   **Manipulation Methods**:

    ```{r}
    #| label: tbl-methods-sf
    #| tbl-cap: "Methods available for the class 'sf' in R using {sf} package"

    methods(class = "sf") |> 
      as_tibble() |>
      rename(methods = x) |> 
      mutate(methods = str_replace_all(methods, ",sf", "  ")) |> 
      mutate(methods = str_replace_all(methods, ".sf", "  ")) |> 
      gt::gt() |> 
      gt::tab_header(
        title = "Methods available"
      ) |> 
      gt::opt_interactive()

    ```

    -   Methods like `aggregate()`, `cbind()`, `merge()`, and `rbind()` work seamlessly with `sf` objects.

    -   Compatible with tidyverse functions (`dplyr`, `tidyr`) and can be used with `data.table` (partial compatibility noted in issue [#2273](https://github.com/Rdatatable/data.table/issues/2273)).

    -   Dropping geometry (`st_drop_geometry()`) can speed up attribute data operations when spatial data is not required.

    ```{r}
    #| code-fold: false
    #| collapse: true

    # Original 'world' dataset
    dim(world)
    class(world)

    # Dropping the geometry column: Effects
    st_drop_geometry(world) |> 
      dim()
    st_drop_geometry(world) |> 
      class()
    ```

-   **Advantages**:

    -   `sf`'s integration with the tidyverse allows robust, efficient data manipulation.
    -   Compatible with tidyverse functions (e.g., `dplyr`), making it versatile for data analysis.

::: key-learning
**Major Pitfalls of Using Spatial Data with the Tidyverse**

1.  **Name Clashes**
    -   Functions like `select()` from [`dplyr`](https://dplyr.tidyverse.org/reference/select.html) can mask similar functions from the [`raster`](https://rspatial.github.io/raster/reference/select.html) package.
    -   Use fully qualified names (e.g., [`dplyr::select()`](https://dplyr.tidyverse.org/reference/select.html)) to avoid conflicts.
2.  **Compatibility Issues with `sp` Package**
    -   The older [`sp`](https://cran.r-project.org/web/packages/sp/index.html) package does not integrate well with tidyverse functions.
    -   Requires conversion between `sp` to [`sf`](https://r-spatial.github.io/sf/articles/sf1.html) object types using functions like [`st_as_sf()`](https://r-spatial.github.io/sf/reference/st_as_sf.html).
3.  **Handling Multipolygon Objects**
    -   Multiple geometries in objects can cause unexpected plotting results.
    -   Resolve issues by casting to simpler geometry types using `st_cast(to = "POLYGON")`.
4.  **Spatial Subsetting Challenges**
    -   Verbose syntax when using tidyverse functions like [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) with spatial predicates like [`st_intersects()`](https://r-spatial.github.io/sf/reference/st_intersects.html).

    -   May result in altered row names, complicating joins and comparisons.

    -   Other option is spatial subsetting using base `R`

        ```{r}
        #| eval: false
        #| code-fold: false
        lnd_buff = lnd[1, ] %>% 
          st_transform(crs = 27700) %>%  # uk CRS
          st_buffer(500000) %>%
          st_transform(crs = 4326)
        near_lnd = world[lnd_buff, ]
        world_poly = world %>% 
          st_cast(to = "POLYGON")
        near_lnd_new = world_poly[lnd_buff, ]
        near_lnd_tidy = world %>% 
          filter(st_intersects(., lnd_buff, sparse = FALSE))
        ```
5.  **Row Name Alterations**
    -   Tidyverse operations may drop or alter row names, affecting joins and comparisons. See related discussion in [tidyverse/dplyr#366](https://github.com/tidyverse/dplyr/issues/366).
6.  **Attribute Alteration Pitfall**
    -   Results from tidyverse functions may differ from base R operations due to row name discrepancies.
    -   Example functions: [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) vs base R subsetting (`[]`).
7.  **Issues with `bind_rows()`**
    -   [`bind_rows()`](https://dplyr.tidyverse.org/reference/bind.html) fails on spatial objects; use alternatives like setting geometries to NULL with [`st_set_geometry()`](https://r-spatial.github.io/sf/reference/st_set_geometry.html) before combining.
8.  **Limited Raster Data Support**
    -   Tidyverse integration with [`raster`](https://rspatial.github.io/raster/) data is minimal.
    -   Initial efforts like [`tabularaster`](https://cran.r-project.org/web/packages/tabularaster/index.html), [`sfraster`](https://cran.r-project.org/web/packages/sfraster/index.html), and [`stars`](https://r-spatial.github.io/stars/) aim to enhance support.
:::

### 3.2.1 Vector Attribute Subsetting

-   **Base R Subsetting**:
    -   Uses `[` operator and `subset()` function for rows and columns selection.

    -   Syntax: `object[i, j]` returns rows indexed by `i` and columns by `j`.

        -   Example: `world[1:5, ]` returns the first 5 rows and all columns.

    -   Examples:

        ``` r
        world[1:6, ]          # First 6 rows
        world[, 1:3]          # First 3 columns
        world[, c("name_long", "pop")] # Columns by name
        ```

    -   Logical Indexing Example:

        ``` r
        i_small = world$area_km2 < 10000
        small_countries = world[i_small, ]   # Subset countries with area < 10,000 km2
        ```

    -   Using `subset()` function:

        ``` r
        small_countries = subset(world, area_km2 < 10000)
        ```
-   **dplyr Subsetting Functions**:
    -   `filter()` and `slice()` for rows, `select()` for columns.

    -   **`select()`**: Subsets columns by name or position.

        ``` r
        world1 = select(world, name_long, pop)
        world2 = select(world, name_long:pop)    # Selects a range of columns
        world3 = select(world, -subregion, -area_km2)   # Removes specific columns
        world4 = select(world, name_long, population = pop)   # Renames columns
        ```

    -   Helper functions in `select()` like `contains()`, `starts_with()`, `num_range()`.

        -   Example: `select(world, contains("pop"))` selects columns containing "pop".
-   **Extracting a Single Column**:
    -   Use `pull()` (dplyr), `$`, or `[[` (base R).

        ``` r
        pull(world, pop)     # Extracts 'pop' column as a vector
        world$pop
        world[["pop"]]
        ```
-   **Row Selection**:
    -   **`slice()`**: Selects rows by index.

        ``` r
        slice(world, 1:6)   # Returns the first 6 rows
        ```

    -   **`filter()`**: Filters rows based on conditions.

        ``` r
        world7 = filter(world, area_km2 < 10000)  # Small area countries
        world7 = filter(world, lifeExp > 82)      # High life expectancy countries
        ```
-   **Comparison Operators**:
    -   Standard operators can be used in `filter()`: `<`, `>`, `<=`, `>=`, `==`, `!=`.

**Summary**: - Base R and `dplyr` offer flexible methods for subsetting `sf` objects, allowing users to retain or drop geometry as needed. - The `dplyr` functions (`filter()`, `select()`, `pull()`) are intuitive and integrate well with the tidyverse workflows. - Logical vectors and helper functions enhance subsetting efficiency in both base R and tidyverse.
