---
title: "Different Packages to access Open Street Maps in R"
author: "Aditya Dahiya"
subtitle: "Exploring {osmdata}, {osmextract}, {osmapiR}"
date: "2025-02-11"
bibliography: references.bib
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
categories:
  - "Maps"
  - "Open Street Maps"
  - "{osmdata}"
  - "{osmextract}"
  - "{osmapiR}"
comments:
  giscus: 
    repo: Aditya-Dahiya/visage
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/visage/geocomputation/osm_packages.html"
  description: "Visualizing Information and Spatial Analysis with ggplot2 Extensions"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
  facebook: true
---

## Introduction

```{r}
#| label: setup

# Data wrangling & visualization
library(tidyverse)  # Data manipulation & visualization

# Spatial data handling
library(sf)         # Import, export, and manipulate vector data
library(terra)      # Import, export, and manipulate raster data

# ggplot2 extensions
library(tidyterra)  # Helper functions for using terra with ggplot2

# Final plot tools
library(scales)               # Nice Scales for ggplot2
library(fontawesome)          # Icons display in ggplot2
library(ggtext)               # Markdown text in ggplot2
library(showtext)             # Display fonts in ggplot2
library(patchwork)            # Composing Plots

bts = 42 # Base Text Size
sysfonts::font_add_google("Roboto Condensed", "body_font")
sysfonts::font_add_google("Oswald", "title_font")
showtext::showtext_auto()
# A base Colour
bg_col <- "white"
seecolor::print_color(bg_col)

# Colour for highlighted text
text_hil <- "grey30"
seecolor::print_color(text_hil)

# Colour for the text
text_col <- "grey20"
seecolor::print_color(text_col)

theme_set(
  theme_minimal(
    base_size = bts,
    base_family = "body_font"
  ) +
    theme(
      text = element_text(
        colour = "grey30",
        lineheight = 0.3,
        margin = margin(0,0,0,0, "pt")
      ),
      plot.title = element_text(
        hjust = 0.5
      ),
      plot.subtitle = element_text(
        hjust = 0.5
      )
    )
)

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")
plot_caption <- paste0(
  "**Data**:  Open Street Maps through {osmextract}",
  "  |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )
rm(github, github_username, xtwitter, 
   xtwitter_username, social_caption_1, 
   social_caption_2)

```

```{r}
#| label: tbl-osm-pkgs
#| tbl-cap: "Comparison of various R packages that facilitate access to OpenStreetMap (OSM) data. Each package serves different purposes, ranging from querying small datasets via the Overpass API to downloading large-scale extracts for bulk processing."
#| eval: true

library(gt)

osm_packages <- tibble::tibble(
  `Package Name` = c(
    "[osmdata](https://github.com/ropensci/osmdata)",
    "[osmapiR](https://github.com/ropensci/osmapiR)",
    "[osmextract](https://github.com/ropensci/osmextract)",
    "[geofabrik](https://cran.r-project.org/package=geofabrik)"
  ),
  `Description` = c(
    "Provides an R interface to the Overpass API for querying OSM data.",
    "R interface to the OpenStreetMap API v0.6 for fetching and saving raw geodata.",
    "Downloads, converts, and imports bulk OSM data (.pbf files).",
    "Downloads OSM data from Geofabrik’s regional extracts."
  ),
  `Advantages` = c(
    "Ideal for extracting specific features; flexible Overpass API queries.",
    "Allows fetching, editing, and saving OSM data, including metadata and GPS traces.",
    "Efficiently handles large-scale OSM extracts; supports bulk processing.",
    "Easy access to pre-processed regional OSM extracts; simplifies data handling."
  ),
  `Disadvantages` = c(
    "Rate-limited API; not suited for large datasets.",
    "Not designed for bulk OSM data retrieval; more useful for metadata analysis.",
    "Requires handling large .pbf files; needs external dependencies for conversion.",
    "Limited to available regional extracts; lacks fine-grained filtering."
  )
)

osm_packages |> 
  gt() |> 
  gtExtras::gt_theme_nytimes() |> 
  fmt_markdown(columns = `Package Name`) |> 
  tab_header(
    title = "Comparison of R Packages for Accessing OpenStreetMap Data"
  ) |> 
  tab_footnote(
    footnote = md("**Data sources:** OpenStreetMap, Overpass API, Geofabrik, and various R package repositories.")
  ) |> 
  tab_style(
    style = cell_text(font = "monospace", weight = "bold"),
    locations = cells_body(
      columns = `Package Name`
    )
  )
```

## `osmextract`

The `{osmextract}` package in R provides an efficient way to download and extract OpenStreetMap (OSM) data in a structured format. It allows users to retrieve spatial data such as points, lines, and polygons for specific geographic regions, making it useful for mapping, geospatial analysis, and urban studies. The package integrates well with `{sf}` to handle spatial objects and supports various file formats for seamless data extraction.

In the code provided, `{osmextract}` is used to fetch OSM data for Haryana in three layers: points, lines, and polygons. The `{sf}` package is used to manage and manipulate spatial vector data, converting extracted data into simple features. `{geodata}` helps in retrieving administrative boundaries from the GADM database.

```{r}
#| label: download-haryana-data

# Load necessary libraries
library(osmextract)
library(sf)

# Download and extract the data
# Points
points_haryana <- oe_get(
  place = "Haryana",
  layer = "points",
  download_directory = "C:/Users/dradi/Desktop" 
)
object.size(points_haryana) |> print(units = "Mb")

# Lines
lines_haryana <- oe_get(
  place = "Haryana",
  layer = "lines",
  download_directory = "C:/Users/dradi/Desktop"
)
object.size(lines_haryana) |> print(units = "Mb")
# Polygons
polygons_haryana <- oe_get(
  place = "Haryana",
  layer = "multipolygons",
  download_directory = "C:/Users/dradi/Desktop"
)
object.size(polygons_haryana) |> print(units = "Mb")

# Get Haryana Map from GADM / {geodata} with geodata::gadm()
# District Wise Map
haryana_map <- geodata::gadm(
  country = "India",
  level = 2,
  path = tempdir()
) |> 
  st_as_sf() |> 
  janitor::clean_names() |> 
  filter(name_1 == "Haryana") |> 
  rename(district = name_2) |> 
  select(district, geometry)

# Overall Boundary Map
haryana_boundary <- geodata::gadm(
  country = "India",
  level = 1,
  path = tempdir()
) |> 
  st_as_sf() |> 
  janitor::clean_names() |> 
  filter(name_1 == "Haryana") |> 
  select(geometry)
```

### Canals of Haryana

In this analysis, additional packages are used to enhance data extraction, processing, and visualization. The `{elevatr}` package is utilized to retrieve elevation raster data for Haryana. The `{stringr}` package is employed to extract numeric values from text-based attributes, such as canal width from OSM tags. The `{tidyterra}` package is indirectly referenced through `geom_spatraster()`, facilitating the inclusion of raster elevation data. Additionally, `{sf}` remains central for spatial vector data processing, and `{geodata}` continues to provide administrative boundaries from the GADM database. The final map effectively presents Haryana’s irrigation canal network overlaid on an elevation raster with clear administrative boundaries.

```{r}

st_crs(points_haryana)

# Background raster for Haryana
# world_cbhsr_rast <- rnaturalearth::ne_download(
#   scale = 50,
#   type = "HYP_50M_SR",
#   category = "raster"
# )

raster_haryana <- elevatr::get_elev_raster(
  locations = haryana_boundary,
  z = 9
) |> 
  terra::rast() |> 
  terra::crop(haryana_boundary) |> 
  terra::mask(haryana_boundary)

canals_haryana <- lines_haryana |> 
  filter(waterway == "canal") |> 
  select(osm_id, name, other_tags, geometry) |> 
  mutate(width = str_extract(
    other_tags, '(?<=\\"width\\"=>\\")\\d+(?=\\")'),
    width = parse_number(width)
  ) |> 
  st_intersection(haryana_boundary)

g <- ggplot() +
  geom_spatraster(
    data = raster_haryana
  ) +
  scale_fill_gradient(
    high = "grey0", 
    low = "grey90",
    na.value = "transparent",
    trans = "log2",
    breaks = c(200, 400, 600, 1000)
    ) +
  geom_sf(
    data = haryana_map,
    fill = NA,
    colour = "white"
  ) +
  geom_sf(
    data = haryana_boundary,
    colour = "grey20",
    fill = NA,
    linewidth = 0.7
  ) +
  geom_sf(
    data = canals_haryana,
    # mapping = aes(linewidth = length),
    colour = "blue"
  ) +
  # scale_linewidth_continuous(
  #   range = c(0.1, 4)
  # )
  labs(
    title = "Irrigation Canal Network in Haryana (India)",
    subtitle = "Administrative Maps from GADM through {geodata},\nand elevation raster from {elevatr}",
    fill = "Elevation (above sea level) (metres)"
  ) +
  theme(
    legend.position = "inside",
    panel.grid = element_line(
      linewidth = 0.1
    ),
    legend.position.inside = c(0, 0),
    legend.justification = c(0, 0),
    legend.direction = "horizontal",
    legend.title.position = "top",
    legend.margin = margin(0,0,0,0, "pt"),
    legend.box.margin = margin(0,0,0,0, "pt"),
    legend.key.height = unit(5, "pt"),
    legend.key.width = unit(40, "pt"),
    legend.title = element_text(
      hjust = 0.5,
      margin = margin(0,0,2,0,"pt")
    ),
    legend.text = element_text(
      margin = margin(1,0,0,0, "pt")
    )
  )

ggsave(
  plot = g,
  filename = here::here(
    "geocomputation", "images",
    "osm_packages_1.png"
  ),
  height = 2400,
  width = 1800,
  units = "px"
)
```

![Haryana’s irrigation canal network overlaid on an elevation raster with clear administrative boundaries.](images/osm_packages_1.png){#fig-1}

### Plotting Roads

```{r}

# Categorizing Roads by widths and importance
wid0 <- c("motorway_link", "motorway" , "corridor")
wid1 <- c("trunk", "primary", "primary_link", "trunk_link")
wid2 <- c("secondary_link", "secondary")
wid3 <- c("tertiary", "tertiary_link")
wid4 <- c("unclassified", "residential", "service", "road")
wid5 <- c("footway", "track", "cycleway", "pedestrian", "path", 
          "steps", "living_street", "rest_area", "construction",
          "busway", "bridleway", "proposed", "services")
                                                 
     
df1 <- lines_haryana |> 
  as_tibble() |> 
  filter(!is.na(highway)) |> 
  select(osm_id, highway, other_tags, geometry) |> 
  mutate(
    width_var = case_when(
      highway %in%  wid0 ~ "wid0",
      highway %in%  wid1 ~ "wid1",
      highway %in%  wid2 ~ "wid2",
      highway %in%  wid3 ~ "wid3",
      highway %in%  wid4 ~ "wid4",
      highway %in%  wid5 ~ "wid5",
      .default = NA
    )
  ) |> 
  filter(!is.na(width_var)) |> 
  
  # Create a width_var to plot widths and 
  # transparency as per importance
  mutate(
    width_var = fct(
      width_var,
      levels = paste0("wid", 0:5)
    )
  ) |> 
  
  # Convert back to {sf} object
  st_as_sf() |> 
  
  # Keep only portions within the boundaries of Haryana
  st_intersection(haryana_boundary)

g <- ggplot() +
  geom_sf(
    data = df1,
    mapping = aes(
      linewidth = width_var,
      alpha = width_var
    )
  ) +
  geom_sf(
    data = haryana_map,
    colour = alpha("red", 0.2),
    linewidth = 0.6,
    fill = NA
  ) +
  geom_sf(
    data = haryana_boundary,
    linewidth = 1.2,
    colour = "#94475EFF", 
    fill = NA
  ) +
  scale_linewidth_manual(
    values = seq(1, 0.1, -0.15)
  ) +
  scale_alpha_manual(
    values = seq(0.8, 0.1, -0.12)
  ) +
  labs(
    title = "All Highways and Roads of Haryana (India)",
    subtitle = "Bulk data download using {osmextract}, geocomputation\nwith {sf} and plotting with {ggplot2}",
    caption = plot_caption
  ) +
  theme_minimal(
    base_family = "body_font",
    base_size = 40
  ) +
  theme(
    legend.position = "none",
    text = element_text(
      colour = "grey30",
      lineheight = 0.3,
      hjust = 0.5
    ),
    plot.title = element_text(
      margin = margin(10,0,0,0, "pt"),
      hjust = 0.5,
      size = 90
    ),
    plot.subtitle = element_text(
      margin = margin(5,0,0,0, "pt"),
      hjust = 0.5,
      size = 70,
      lineheight = 0.4
    ),
    plot.caption = element_textbox(
      hjust = 0.5,
      halign = 0.5
    ),
    panel.grid = element_line(
      colour = "grey80",
      linewidth = 0.1
    )
  )

ggsave(
  plot = g,
  filename = here::here(
    "geocomputation", "images",
    "osm_packages_2.png"
  ),
  height = 3800,
  width = 2800,
  units = "px",
  bg = "white"
)
```

![A map of Haryana (borders in red), with administrative boundaries of districts (in translucent red) overlaid with all the major roads - larger roads and highways are wider and more opaque, lesser width roads are thinner and more translucent.](images/osm_packages_2.png){#fig-2}

### Trying to plot Roads, coloured by some attributes extracted from Open Street Maps

```{r}
df2 <- df1 |>
  filter(!is.na(other_tags)) |> 
  mutate(
    maxspeed = str_extract(other_tags, 
                           '"maxspeed"=>"\\d+"') |> 
      str_extract("\\d+") |> 
      as.numeric(),
    
    lanes = str_extract(other_tags, '"lanes"=>"\\d+"') |> 
      str_extract("\\d+") |> 
      as.numeric(),
    
    surface = str_extract(other_tags, 
                          '"surface"=>"[a-zA-Z0-9_-]+"') |> 
      str_remove_all('"surface"=>"')
  ) |> 
  mutate(surface = str_remove_all(surface, '\\"$'))


df2 |> 
  st_drop_geometry() |> 
  count(surface, sort = T) |> 
  pull(surface)

df3 <- df2 |> 
  filter(!is.na(surface)) |> 
  mutate(
    maxspeed = str_extract(
      other_tags, '"maxspeed"=>"\\d+"'
      ) |> 
      str_extract("\\d+") |> 
      as.numeric()
    ) |> 
  filter(!is.na(maxspeed)) |> 
  mutate(
    surface = if_else(
      surface %in% c("asphalt",
                     "paved",
                     "unpaved",
                     "concrete"),
      surface,
      "Others"
    ),
    surface = str_to_title(surface),
    surface = fct(
      surface,
      levels = c(
        "Asphalt",
        "Concrete",
        "Paved",
        "Unpaved",
        "Others"
      )
    )
  )

g <- ggplot() +
  geom_sf(
    data = df3,
    mapping = aes(colour = surface),
    key_glyph = draw_key_abline
  ) +
  paletteer::scale_colour_paletteer_d(
    "nbapalettes::suns_00s"
    ) +
  geom_sf(
    data = haryana_map,
    colour = alpha("black", 0.4),
    linewidth = 0.6,
    fill = NA
  ) +
  geom_sf(
    data = haryana_boundary,
    linewidth = 1.2,
    colour = "black", 
    fill = NA
  ) +
  labs(
    title = "Speed Limits on Roads in Haryana (India)",
    subtitle = "Bulk data download using {osmextract}, geocomputation\nwith {sf} and plotting with {ggplot2}",
    caption = plot_caption,
    colour = "Type of Road Surface"
  ) +
  theme_minimal(
    base_family = "body_font",
    base_size = 40
  ) +
  theme(
    legend.position = "inside",
    legend.position.inside = c(0.1,0.2),
    legend.justification = c(0,0),
    legend.direction = "vertical",
    text = element_text(
      colour = "grey30",
      lineheight = 0.3,
      hjust = 0.5
    ),
    plot.title = element_text(
      margin = margin(10,0,0,0, "pt"),
      hjust = 0.5,
      size = 90
    ),
    plot.subtitle = element_text(
      margin = margin(5,0,0,0, "pt"),
      hjust = 0.5,
      size = 70,
      lineheight = 0.4
    ),
    plot.caption = element_textbox(
      hjust = 0.5,
      halign = 0.5
    ),
    panel.grid = element_line(
      colour = "grey80",
      linewidth = 0.1
    ),
    legend.title.position = "top",
    legend.margin = margin(0,0,0,0, "pt"),
    legend.box.margin = margin(0,0,0,0, "pt")
  )

ggsave(
  plot = g,
  filename = here::here(
    "geocomputation", "images",
    "osm_packages_3.png"
  ),
  height = 3800,
  width = 2800,
  units = "px",
  bg = "white"
)
```

![](images/osm_packages_3.png)

### Combining with Population Density Raster Dataset

The population raster data is sourced from *Global High-Resolution Annual Population Grids (2000-2023), v1* by **Ciesin, Center for International Earth Science Information Network, Columbia University** [(CIESIN, 2024)](https://zenodo.org/records/11179644). This dataset provides high-resolution population estimates globally, integrating census and administrative data with geospatial modeling to refine population distributions. The data, maintained by **NASA’s Socioeconomic Data and Applications Center (SEDAC)**, is valuable for demographic analysis, urban planning, and environmental studies. The full dataset and documentation are available on [Zenodo](https://zenodo.org/records/11179644).

The **Haryana population density map** is generated using high-resolution raster data from the *Global High-Resolution Annual Population Grids (2000-2023)* dataset. The `{terra}` package is used to handle raster operations, where the **`rast()`** function reads the population density raster, followed by **`crop()`** and **`mask()`** to limit the data to the Haryana state boundary. To ensure effective visualization, values below or equal to zero are replaced with `0.01` for smooth log transformation. The road network is overlaid using `{sf}`, with **`geom_sf()`** displaying highways extracted using `{osmextract}`. The population raster is plotted using **`geom_spatraster()`** from `{ggplot2}` and styled with a **log-transformed color scale** via `{paletteer}` to highlight variations in density.

```{r}
# 2022 year Global Population Density 30 sec arc resolution
# url <- "https://zenodo.org/records/11179644/files/GlobPOP_Count_30arc_2022_I32.tiff?download=1"
# 
output_file <- "GlobPOP_Count_30arc_2022_I32.tiff"
# download.file(url, output_file, mode = "wb")

haryana_pop_rast <- rast(output_file) |> 
  terra::crop(haryana_boundary) |> 
  terra::mask(haryana_boundary)

# Ensure all negative and zero values are replaced with 0.01
# (For easy plotting with log transformation scale)
haryana_pop_rast[haryana_pop_rast <= 0] <- 0.01

g <- ggplot() +
  
  # Population Density Raster
  geom_spatraster(data = haryana_pop_rast) +
  paletteer::scale_fill_paletteer_c(
    "grDevices::YlOrBr",
    direction = -1,
    na.value = "transparent",
    transform = "log",
    limits = c(10, 1e5),
    oob = scales::squish,
    breaks = c(0, 10, 100, 1000, 1e4),
    labels = scales::label_number(big.mark = ",")
  ) +

  # Road Network
  geom_sf(
    data = df1 |> filter(highway %in% c(wid1, wid2)),
    linewidth = 0.3,
    alpha = 0.9
  ) +

  geom_sf(
    data = haryana_boundary,
    linewidth = 1.2,
    colour = "black", 
    fill = NA
  ) +
  labs(
    # title = "Population Density vs. Road Network (Haryana)",
    # subtitle = "Bulk data download using {osmextract}, geocomputation\nwith {sf} and plotting with {ggplot2}",
    # caption = plot_caption,
    fill = "Population Density\n(Persons per sq. km.)"
  ) +
  theme_minimal(
    base_family = "body_font",
    base_size = 40
  ) +
  theme(
    legend.position = "inside",
    legend.position.inside = c(0.02,0.05),
    legend.justification = c(0,0),
    legend.direction = "vertical",
    text = element_text(
      colour = "grey30",
      lineheight = 0.3,
      hjust = 0.5
    ),
    plot.title = element_text(
      margin = margin(10,0,0,0, "pt"),
      hjust = 0.5,
      size = 90
    ),
    plot.subtitle = element_text(
      margin = margin(10,0,0,0, "pt"),
      hjust = 0.5,
      size = 70,
      lineheight = 0.3
    ),
    plot.caption = element_textbox(
      hjust = 0.5,
      halign = 0.5
    ),
    panel.grid = element_line(
      colour = "grey80",
      linewidth = 0.1
    ),
    legend.title.position = "top",
    legend.margin = margin(0,0,0,0, "pt"),
    legend.box.margin = margin(0,0,0,0, "pt"),
    legend.text = element_text(
      margin = margin(0,0,0,2, "pt"),
      size = 60
    ),
    legend.title = element_text(
      margin = margin(0,0,5,0, "pt"),
      size = 60
    ),
    legend.background = element_rect(
      fill = "transparent",
      colour = "transparent"
    ),
    legend.key.height = unit(40, "pt")
  )

ggsave(
  plot = g,
  filename = here::here(
    "geocomputation", "images",
    "osm_packages_4.png"
  ),
  height = 3800,
  width = 2800,
  units = "px",
  bg = "white"
)
```

![](images/osm_packages_4.png)

### Comparing with some districts

The **inset district maps** focus on seven key districts, emphasizing transit-oriented development along highways. The **`plot_district()`** function extracts population density data for a given district by using **`crop()`** and **`mask()`** from `{terra}`. To enhance clarity, districts with multiple polygons (such as Faridabad) are filtered using **`st_cast("POLYGON")`**. The district's road network is extracted with **`st_intersection()`**, ensuring only relevant highways are displayed. `{patchwork}` is used to arrange the Haryana map alongside its inset districts with a custom layout via **`plot_layout()`**, effectively demonstrating the correlation between population density and road infrastructure.

```{r}

plot_district <- function(selected_district){
  
  dist_map <- if_else(
    selected_district == "Faridabad",
    haryana_map |> 
      filter(district == "Faridabad") |> 
      st_cast("POLYGON") |> 
      slice(2),
    haryana_map |> 
    filter(district == selected_district)
  )
  
  dist_rast <- haryana_pop_rast |> 
    crop(dist_map) |> 
    mask(dist_map, touches = FALSE)
  
  dist_roads <- df1 |> 
    filter(highway %in% c(wid1, wid2, wid3)) |> 
    st_intersection(dist_map)
  
  ggplot() +
    # Population Density Raster
    geom_spatraster(data = dist_rast) +
    paletteer::scale_fill_paletteer_c(
      "grDevices::YlOrBr",
      direction = -1,
      na.value = "transparent",
      transform = "log",
      limits = c(10, 1e5),
      oob = scales::squish,
      breaks = c(0, 10, 100, 1000, 1e4),
      labels = scales::label_number(big.mark = ",")
    ) +
  
    # Road Network
    geom_sf(
      data = dist_roads,
      linewidth = 0.3,
      alpha = 0.9
    ) +
  
    geom_sf(
      data = dist_map,
      linewidth = 0.6,
      colour = "black", 
      fill = NA
    ) +
    labs(
      title = selected_district,
      fill = "Population Density\n(Persons per sq. km.)"
    ) +
    theme_void(
      base_family = "body_font",
      base_size = 40
    ) +
    theme(
      legend.position = "none",
      plot.title = element_text(
        hjust = 0.5,
        margin = margin(0,0,-10,0, "pt"),
        size = 80
      )
    )
}

g1 <- g

g2 <- plot_district("Gurgaon")

g3 <- plot_district("Faridabad")

g4 <- plot_district("Panipat")

g5 <- plot_district("Yamunanagar")

g6 <- plot_district("Ambala")

g7 <- plot_district("Sonipat")

library(patchwork)
my_design <- ("
AAB
AAC
AAD
GFE
")

g <- wrap_plots(g1, g2, g3, g4, g5, g6, g7) +
  plot_layout(
    design = my_design,
    widths = c(1.2, 1.2, 0.8),
    heights = c(1, 1, 1, 0.8)
  ) +
  plot_annotation(
    title = "Population Density vs. Road Network (Haryana)",
    subtitle = str_wrap("Dense population areas either occur along or on highways, or perhaps highways develop to connect high population areas.", 70),
    caption = plot_caption,
    theme = theme(
      plot.title = element_text(
        margin = margin(10,0,0,0, "pt"),
        hjust = 0.5,
        size = 120,
        face = "bold"
      ),
      plot.subtitle = element_text(
        margin = margin(10,0,0,0, "pt"),
        hjust = 0.5,
        size = 90,
        lineheight = 0.3
      ),
      plot.caption = element_textbox(
        hjust = 0.5,
        halign = 0.5,
        size = 50,
        family = "body_font"
      ),
      text = element_text(
        colour = "grey30"
      )
    )
  )


ggsave(
  plot = g,
  filename = here::here(
    "geocomputation", "images",
    "osm_packages_5.png"
  ),
  height = 1300 * 4,
  width = 1300 * 3,
  units = "px",
  bg = "white"
)
```

![A raster map of population density for the state of Haryana (India), overlaid with the road network (displaying only highways) extracted from Open Street Maps using {osmextract}. The 7 side-maps show the focus on 7 different districts of Haryana., which show some element of transit-oriented development - i.e., high population density areas along the highways.](images/osm_packages_5.png){#fig-3}

### Health Facilities

```{r}
# Health Care Facilties (as points)
points_haryana |> 
  as_tibble() |> 
  filter(str_detect(other_tags, "health|hospital|pharmacy|clinic")) |> 
  ggplot() +
  geom_sf(
    aes(geometry = geometry)
  )

#
names(lines_haryana)
```
