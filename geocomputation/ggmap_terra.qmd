---
title: "Cropping {ggmap} rasters with {terra} to make beautiful maps"
author: "Aditya Dahiya"
subtitle: "Combining the feautres of {ggmap}, {osmdata}, {terra} and {tidyterra}"
date: "2025-03-10"
bibliography: references.bib
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
categories:
  - "Maps"
  - "[ggmap}"
  - "{osmdata}"
  - "{terra}"
  - "{tidyterra}"
  - "Raster"
comments:
  giscus: 
    repo: Aditya-Dahiya/visage
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/visage/geocomputation/ggmap_terra.html"
  description: "Visualizing Information and Spatial Analysis with ggplot2 Extensions"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
  facebook: true
---

### Loading Libraries

```{r}
#| label: setup

# Data wrangling & visualization
library(tidyverse)  # Data manipulation & visualization

# Spatial data handling
library(sf)         # Import, export, and manipulate vector data
library(terra)      # Import, export, and manipulate raster data

# ggplot2 extensions
library(tidyterra)  # Helper functions for using terra with ggplot2

# Getting raster tiles
library(ggmap)      # Getting map raster tiles
library(osmdata)    # Get Open Street Maps

# Final plot tools
library(scales)               # Nice Scales for ggplot2
library(fontawesome)          # Icons display in ggplot2
library(ggtext)               # Markdown text in ggplot2
library(showtext)             # Display fonts in ggplot2
library(patchwork)            # Composing Plots

bts = 12 # Base Text Size
sysfonts::font_add_google("Roboto Condensed", "body_font")
sysfonts::font_add_google("Oswald", "title_font")
sysfonts::font_add_google("Saira Extra Condensed", "caption_font")

showtext::showtext_auto()
# A base Colour
bg_col <- "white"
seecolor::print_color(bg_col)

# Colour for highlighted text
text_hil <- "grey30"
seecolor::print_color(text_hil)

# Colour for the text
text_col <- "grey20"
seecolor::print_color(text_col)

theme_set(
  theme_minimal(
    base_size = bts,
    base_family = "body_font"
  ) +
    theme(
      text = element_text(
        colour = "grey30",
        lineheight = 0.3,
        margin = margin(0,0,0,0, "pt")
      ),
      plot.title = element_text(
        hjust = 0.5
      ),
      plot.subtitle = element_text(
        hjust = 0.5
      )
    )
)

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")
plot_caption <- paste0(
  "**Data**:  StadiaMaps & Open Street Maps",
  "  |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )
rm(github, github_username, xtwitter, 
   xtwitter_username, social_caption_1, 
   social_caption_2)
```

### Getting, cropping, masking and plotting raster maps

This code leverages multiple R packages to create a detailed map of London Boroughs, integrating rasterized map tiles with spatial vector data. The [{sf}](https://r-spatial.github.io/sf/) package is used to obtain and manipulate the bounding box of London Boroughs, while [{spData}](https://nowosad.github.io/spData/) provides the spatial dataset. The [{ggmap}](https://cran.r-project.org/package=ggmap) package is used to fetch base map tiles from Stamen Maps via `get_stadiamap()`, and [{terra}](https://rspatial.github.io/terra/reference/terra-package.html) functions like `rast()`, `crop()`, and `mask()` are applied to process and refine these tiles. The map visualization is built using [{ggplot2}](https://ggplot2.tidyverse.org/), with additional enhancements from [{ggrepel}](https://cran.r-project.org/package=ggrepel) for labeling borough names, [{paletteer}](https://cran.r-project.org/package=paletteer) for colour scaling, and [{ggthemes}](https://cran.r-project.org/package=ggthemes) for theming. The final visualization overlays London Boroughs on the map tiles, applying transparency and borders for clarity, and saves the output using [{here}](https://cran.r-project.org/package=here).

```{r}

# Obtain the bounding box of London Boroughs
london_bbox <- sf::st_bbox(spData::lnd)

# A bounding box in the format c(lowerleftlon, lowerleftlat, upperrightlon, upperrightlat)
london_bbox <- c(
  left = london_bbox$xmin,
  right = london_bbox$xmax,
  bottom = london_bbox$ymin,
  top = london_bbox$ymax
)
names(london_bbox) <- c("left", "right", "bottom", "top")

# Getting London Boroughs Data
df <- spData::lnd |>
  st_transform("EPSG:4326")

# Register stadia maps API key
# register_stadiamaps("Your-Key-Here")

# Getting the map tiles
# london_base1 <- get_stadiamap(
#   bbox = london_bbox,
#   zoom = 11,
#   maptype = "stamen_toner_lines"
# )

london_base2 <- get_stadiamap(
  bbox = london_bbox,
  zoom = 11,
  maptype = "stamen_toner_background"
)

# Convert {ggmap} object into a SpatRaster
london_base3 <- london_base2 |> 
  rast() |> 
  crop(df) |> 
  mask(df)

# Starting with base map tiles
g <- ggplot() +
  
  # Plotting the cropped raster map
  geom_spatraster_rgb(
    data = london_base3,
    maxcell = Inf,
    alpha = 0.7
  ) +
  
  # Plotting the London boroughs
  geom_sf(
    data = df,
    aes(fill = NAME),
    alpha = 0.1,
    linewidth = 0.8,
    colour = alpha("white", 0.5)
  ) +
  paletteer::scale_fill_paletteer_d("palettesForR::Tango") +
  
  # Plotting overall border of London City
  geom_sf(
    data = df |> st_geometry() |> st_union(),
    colour = text_col,
    linewidth = 0.3,
    fill = NA
  ) +
  
  # Plotting names of London Boroughs on top of the geom_sf
  ggrepel::geom_label_repel(
    data = df,
    aes(label = NAME, geometry = geometry, size = HECTARES),
    fill = alpha("white", 0.5),
    colour = text_col,
    family = "caption_font",
    fontface = "bold",
    label.size = unit(0, "pt"),
    stat = "sf_coordinates"
  ) +
  scale_size_continuous(range = c(5, 20)) +
  
  coord_sf(expand = FALSE) +
  
  # Labels
  labs(
    title = "Boroughs of London",
    subtitle = str_wrap("Overlaying a {ggmap}'s Stamen Map (rasterized and cropped with {terra} functions, plotted with {tidyterra}) with an {sf} object of london boroughs (from {spData}), and writing names of Boroughs with {ggrepel}'s geom_label_repel() and stat = \"sf_coordinates\"", 90),
    caption = plot_caption
  ) +
  
  # Some theme elements
  ggthemes::theme_map(
    base_size = bts,
    base_family = "body_font"
  ) +
  theme(
    legend.position = "none",
    plot.title = element_text(
      size = 4 * bts,
      margin = margin(30,0,10,0, "pt"),
      hjust = 0.5
    ),
    plot.subtitle = element_text(
      margin = margin(0,0,0,0, "pt"),
      lineheight = 0.3,
      size = bts * 1.4,
      hjust = 0.5
    ),
    plot.caption = element_textbox(
      margin = margin(0,0,20,0, "pt"),
      hjust = 0.5,
      halign = 0.5,
      family = "caption_font"
    ),
    plot.margin = margin(0,-10,0,-10, "pt")
  )

ggsave(
  filename = here::here("geocomputation", 
                        "images", 
                        "ggmap_terra_1.png"),
  plot = g,
  height = 3000,
  width = 3000,
  units = "px",
  bg = "white"
)
```

![A raster tile maps of Stamen Toner Background for London area, plotted at the base. London Boroughs' borders plotted on top of it, along with names of the boroughs.](images/ggmap_terra_1.png)

```{r}

# haryana <- geodata::gadm(
#   country = "India",
#   level = 3,
#   path = tempdir()
# )
# 
# haryana |> 
#   janitor::clean_names() |> 
#   filter(name_1 == "Haryana") |> 
#   st_as_sf() |> 
#   ggplot() +
#   geom_sf() +
#   geom_sf_text(
#     size = 3,
#     mapping = aes(label = name_3)
#   )

haryana <- read_sf(
  here::here(
    "data", "haryana_map",
    "HARYANA_SUBDISTRICT_BDY.shp"
  )
) |> 
  janitor::clean_names() |> 
  mutate(
    district = str_replace_all(district, ">", "A"),
    district = str_replace_all(district, "\\|", "I"),
    district = str_to_title(district),
    tehsil = str_replace_all(tehsil, ">", "A"),
    tehsil = str_replace_all(tehsil, "\\|", "I"),
    tehsil = str_to_title(tehsil)
  ) |> 
  st_simplify(dTolerance = 100) |> 
  select(-state, -shape_leng, -shape_area)

haryana_boundary

haryana |> 
  st_union() |> 
  st_cast("POLYGON") |> 
  st_as_sf() |> 
  slice(1) |> 
  ggplot() +
  geom_sf()

  
ggplot() +
  geom_sf(data = haryana_boundary)
```

Mapping a Coastal Town, Vladivostok (Russia) to highlight coastline, elevation and urban landscape in R

[Inspiration Code](https://aditya-dahiya.github.io/visage/book_solutions/chapter7.html#fig-9_2) for custom CRS projections, written by me for another page.

[May Style Library](https://docs.stadiamaps.com/themes/) (for the StadiaMaps)

```{r}

city_bb <- osmdata::getbb("Vladivostok")

city_map <- opq(bbox = city_bb) |> 
  add_osm_feature(
    key = "boundary",
    value = "administrative"
  ) |> 
  osmdata_sf()

new_crs <- paste0(
  "+proj=laea +x_0=0 +y_0=0 +lon_0=", mean(city_bb[1, 1], city_bb[1, 2]), 
  " +lat_0=", mean(city_bb[2, 1], city_bb[2, 2])
)

# register_stadiamaps("your-key-here")
# Convert bbox to a polygon
coords <- matrix(c(
  city_bb["x", "min"], city_bb["y", "min"],  # bottom-left
  city_bb["x", "max"], city_bb["y", "min"],  # bottom-right
  city_bb["x", "max"], city_bb["y", "max"],  # top-right
  city_bb["x", "min"], city_bb["y", "max"],  # top-left
  city_bb["x", "min"], city_bb["y", "min"]   # back to start to close polygon
), ncol = 2, byrow = TRUE)

# Create sf polygon object
city_poly <- st_polygon(list(coords)) %>%
  st_sfc() |>                     # create simple feature collection
  st_sf() |>                      # convert to sf object
  st_set_crs("EPSG:4326")
rm(coords)

city_map1 <- city_map$osm_multipolygons |>
  select(osm_id, name, admin_level, geometry) |> 
  filter(admin_level == 9)

city_border <- city_map1 |> 
  st_geometry() |> 
  st_union()

raw_rast <- get_stadiamap(
  bbox = st_bbox(city_border),
  zoom = 8,
  maptype = "stamen_toner_background"
)

ggplot(
  data = city_map1,
  ) +
  geom_sf(
    alpha = 0.3
  ) +
  geom_sf(
    data =  city_poly,
    fill = NA
  )

ggplot() +
  geom_sf(
    data = city_map1
  ) +
  coord_sf(
    crs = "EPSG:4326"
  ) +
  ggthemes::theme_map()
```
