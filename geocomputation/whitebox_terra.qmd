---
title: "Showing elevation in Maps (1) : {whitebox} & {terra}"
author: "Aditya Dahiya"
subtitle: "Exploring {whitebox} & {terra} for shaded relief maps with {ggplot2} and {tidyterra}"
date: "2025-02-03"
bibliography: references.bib
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
categories:
  - "Maps"
  - "Geocomputation"
  - "{whitebox}"
  - "{terra}"
comments:
  giscus: 
    repo: Aditya-Dahiya/visage
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/visage/geocomputation/whitebox_terra.html"
  description: "Visualizing Information and Spatial Analysis with ggplot2 Extensions"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
  facebook: true
---

In this project, we apply hillshade techniques to visualize the topography of Sikkim, India, using digital elevation models (DEMs). Hillshading, a method that simulates shadows cast by terrain, enhances the three-dimensional appearance of elevation data, making it valuable for geospatial analysis through resources like the [USGS](https://www.usgs.gov/news/featured-story/hillshading-digital-elevation-models). This work follows Dr. Dominic Royé’s guide on generating hillshade effects using **`R`**, as outlined in [Dominic Royé’s Blog](https://dominicroye.github.io/blog/hillshade-effect/).

We employ R’s geospatial packages, including [terra](https://cran.r-project.org/web/packages/terra/index.html) for raster processing, [rayshader](https://github.com/tylermorganwall/rayshader) for 3D rendering, and [elevatr](https://cran.r-project.org/web/packages/elevatr/index.html) for retrieving elevation data from sources such as [NASA’s SRTM](https://earthdata.nasa.gov/). These techniques effectively highlight Sikkim’s complex Himalayan terrain, essential for environmental monitoring, disaster risk assessment, and ecological studies. The approach can also be extended to land-use planning and hydrological modeling.

```{r}
#| label: setup

# Data wrangling & visualization
library(tidyverse)  # Data manipulation & visualization

# Spatial data handling
library(sf)         # Import, export, and manipulate vector data
library(terra)      # Import, export, and manipulate raster data
library(elevatr)    # Access elevation data from APIs

# Geospatial processing
library(whitebox)   # WhiteboxTools for geospatial analysis

# ggplot2 extensions
library(tidyterra)  # Helper functions for using terra with ggplot2
library(ggnewscale) # Support multiple scales in ggplot2
library(ggblend)    # Enable color blending in ggplot2

# Final plot tools
library(scales)               # Nice Scales for ggplot2
library(fontawesome)          # Icons display in ggplot2
library(ggtext)               # Markdown text in ggplot2
library(showtext)             # Display fonts in ggplot2
library(colorspace)           # Lighten and Darken colours
library(patchwork)            # Composing Plots

bts = 12 # Base Text Size
sysfonts::font_add_google("Roboto Condensed", "body_font")
sysfonts::font_add_google("Oswald", "title_font")
showtext::showtext_auto()
theme_set(
  theme_minimal(
    base_size = bts,
    base_family = "body_font"
  ) +
    theme(
      text = element_text(
        colour = "grey30",
        lineheight = 0.3,
        margin = margin(0,0,0,0, "pt")
      ),
      plot.title = element_text(
        hjust = 0.5
      ),
      plot.subtitle = element_text(
        hjust = 0.5
      )
    )
)

# Some basic caption stuff
# A base Colour
bg_col <- "white"
seecolor::print_color(bg_col)

# Colour for highlighted text
text_hil <- "grey30"
seecolor::print_color(text_hil)

# Colour for the text
text_col <- "grey20"
seecolor::print_color(text_col)


# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")
plot_caption <- paste0(
  "**Tools**: {hillshader} *#rstats* ",
  "  |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )
rm(github, github_username, xtwitter, 
   xtwitter_username, social_caption_1, 
   social_caption_2)
```

## Trying the technique for Sikkim (India)

```{r}

# Get sikkim administrative boundary data
sikkim_vec <- read_sf(
  here::here(
    "data", "india_map",
    "India_State_Boundary.shp"
  )
) |> 
  filter(State_Name == "Sikkim") |> 
  st_transform("EPSG:4326")

# Test plot the sf object: a vector
ggplot(sikkim_vec) +
  geom_sf(fill = NA) +
  labs(title = "Sikkim (India)")

# Get the Lakes of Sikkim for {osm}---------------------------------

# ------------------------------------------------------------------

# Get DEM: Digital Elevation Model of Sikkim from {elevatr}

sikkim_rast <- elevatr::get_elev_raster(
  locations = sikkim_vec,
  z = 7
) |> 
  rast() |> 
  terra::crop(sikkim_vec) |> 
  terra::mask(sikkim_vec)

sikkim_rast

ggplot() +
  geom_spatraster(data = sikkim_rast) +
  geom_sf(data = sikkim_vec, fill = NA) +
  scale_fill_hypso_c(
    labels = scales::label_number(
      scale_cut = cut_short_scale()
    )
  ) +
  labs(
    title = "Sikkim (India)",
    fill = "Elevation (metres)"
  ) +
  theme(
    legend.position = "inside",
    legend.position.inside = c(0,1),
    legend.justification = c(0,1),
    legend.key.height = unit(10, "pt"),
    legend.key.width = unit(20, "pt"),
    legend.title.position = "top",
    legend.direction = "horizontal",
    plot.title = element_text(
        size = bts * 2,
        margin = margin(15,0,2,0, "pt")
      ),
    panel.grid = element_line(
        linewidth = 0.2,
        linetype = 3
    ),
    legend.title = element_text(
      margin = margin(0,0,2,0, "pt")
    ),
    legend.text = element_text(
      margin = margin(1,0,0,0, "pt")
    )
  )
```

Saving the graphic

```{r}
ggsave(
  plot = g,
  filename = here::here(
    "geocomputation", "images",
    "hillshader_package_3.png"
  ),
  height = 5000,
  width = 4800,
  units = "px",
  bg = "white"
)
```
