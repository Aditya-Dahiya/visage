---
title: "Population Density Rasters (globally) over time"
author: "Aditya Dahiya"
subtitle: "Exploring the various datasets available by GlobPOP project (1990-2022) "
date: "2025-02-14"
bibliography: references.bib
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: false
categories:
  - "Maps"
  - "Geocomputation"
  - "{geodata}"
comments:
  giscus: 
    repo: Aditya-Dahiya/visage
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/visage/geocomputation/population_density_rasters.html"
  description: "Visualizing Information and Spatial Analysis with ggplot2 Extensions"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
  facebook: true
---

## Introduction

```{r}
#| label: setup

# Data wrangling & visualization
library(tidyverse)  # Data manipulation & visualization

# Spatial data handling
library(sf)         # Import, export, and manipulate vector data
library(terra)      # Import, export, and manipulate raster data

# ggplot2 extensions
library(tidyterra)  # Helper functions for using terra with ggplot2

# Final plot tools
library(scales)               # Nice Scales for ggplot2
library(fontawesome)          # Icons display in ggplot2
library(ggtext)               # Markdown text in ggplot2
library(showtext)             # Display fonts in ggplot2
library(patchwork)            # Composing Plots

bts = 42 # Base Text Size
sysfonts::font_add_google("Roboto Condensed", "body_font")
sysfonts::font_add_google("Oswald", "title_font")
showtext::showtext_auto()
# A base Colour
bg_col <- "white"
seecolor::print_color(bg_col)

# Colour for highlighted text
text_hil <- "grey30"
seecolor::print_color(text_hil)

# Colour for the text
text_col <- "grey20"
seecolor::print_color(text_col)

theme_set(
  theme_minimal(
    base_size = bts,
    base_family = "body_font"
  ) +
    theme(
      text = element_text(
        colour = "grey30",
        lineheight = 0.3,
        margin = margin(0,0,0,0, "pt")
      ),
      plot.title = element_text(
        hjust = 0.5
      ),
      plot.subtitle = element_text(
        hjust = 0.5
      )
    )
)

# Caption stuff for the plot
sysfonts::font_add(
  family = "Font Awesome 6 Brands",
  regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf")
)
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
social_caption_1 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_hil}'>{github_username}  </span>")
social_caption_2 <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_hil}'>{xtwitter_username}</span>")
plot_caption <- paste0(
  "**Data**:  Open Street Maps through {osmextract}",
  "  |  **Code:** ", 
  social_caption_1, 
  " |  **Graphics:** ", 
  social_caption_2
  )
rm(github, github_username, xtwitter, 
   xtwitter_username, social_caption_1, 
   social_caption_2)

```

### 33-year population density rasters

Getting Population Density Rasters from [@liu2024]. [Code](https://github.com/lulingliu/GlobPOP) citation.

```{r}
# 1990 to 2022 year Global Population Density 30 sec arc resolution

year_ranges <- c(1990, 2000, 2010, 2020)

# ALERT: Downloads Massive amounts of Data ---------------------------
# Set Working Directory to a temporary one ---------------------------
setwd("C:/Users/dradi/Desktop/pop_raster_data_temp")

year_ranges <- c(1990, 2000, 2010, 2020)

for (i in year_ranges) {
  url <- paste0(
    "https://zenodo.org/records/11179644/files/GlobPOP_Count_30arc_", 
    i, 
    "_I32.tiff")
  
  output_file <- paste0("GlobPOP_Count_30arc_", i, "_I32.tiff")
  download.file(url, output_file, mode = "wb")
}
# --------------------------------------------------------------------

# Get the rasters into R
output_file <- paste0("GlobPOP_Count_30arc_", i, "_I32.tiff")

for (i in year_ranges) {
  paste0("rast_", i) |> 
    assign(
      terra::rast(output_file) |> 
        terra::crop(delhi_map) |> 
        terra::mask(delhi_map, touches = FALSE)
    )
}

rast_1990[rast_1990 <= 0] <- 0.01
rast_2000[rast_2000 <= 0] <- 0.01
rast_2010[rast_2010 <= 0] <- 0.01
rast_2022[rast_2022 <= 0] <- 0.01
```

Getting an example for Delhi, India

```{r}
# Get Delhi Map from GADM / {geodata} with geodata::gadm()
# District Wise Map
delhi_map <- geodata::gadm(
  country = "India",
  level = 2,
  path = tempdir()
) |> 
  st_as_sf() |> 
  janitor::clean_names() |> 
  filter(name_1 == "NCT of Delhi") |> 
  select(name_1, geometry)

# ALERT: Downloads Massive amounts of Data-----------------------------
# Set Working Directory to a temporary one ----------------------------
setwd("C:/Users/dradi/Desktop/pop_raster_data_temp")
# Get {osmextract} data for Delhi - to plot roads
lines_delhi <- osmextract::oe_get(
  place = "Delhi",
  layer = "lines",
  download_directory = "C:/Users/dradi/Desktop/pop_raster_data_temp" 
)

# ---------------------------------------------------------------------
# Categorizing Roads by widths and importance
wid0 <- c("motorway_link", "motorway" , "corridor")
wid1 <- c("trunk", "primary", "primary_link", "trunk_link")
wid2 <- c("secondary_link", "secondary")
wid3 <- c("tertiary", "tertiary_link")

roads_delhi <- lines_delhi |> 
  filter(!is.na(highway)) |> 
  filter(highway %in% c(wid0, wid1, wid2)) |> 
  mutate(
    width_var = case_when(
      highway %in%  wid0 ~ "wid0",
      highway %in%  wid1 ~ "wid1",
      highway %in%  wid2 ~ "wid2",
      highway %in%  wid3 ~ "wid3",
      .default = NA
    )
  ) |> 
  filter(!is.na(width_var)) |> 
  
  # Create a width_var to plot widths and 
  # transparency as per importance
  mutate(
    width_var = fct(
      width_var,
      levels = paste0("wid", 0:3)
    )
  ) |> 
  st_intersection(delhi_map)
```

### Trying out static maps for each year

```{r}

g <- ggplot() +
  geom_spatraster(
    data = rast_2010
  ) +
  paletteer::scale_fill_paletteer_c(
    "grDevices::YlOrBr",
    direction = -1,
    na.value = "transparent",
    transform = "log",
    limits = c(10, 1e6),
    oob = scales::squish,
    breaks = c(0, 10, 100, 1000, 1e4, 1e5, 1e6),
    labels = scales::label_number(big.mark = ",")
  ) +
  geom_sf(
    data = delhi_map,
    fill = NA
  ) +
  geom_sf(
    data = roads_delhi,
    mapping = aes(
      linewidth = width_var,
      alpha = width_var
    )
  ) +
  scale_alpha_manual(
    values = c(0.8, 0.6, 0.4, 0.2)
  ) +
  scale_linewidth_manual(
    values = c(0.8, 0.6, 0.4, 0.2)
  ) +
  theme(
    legend.position = "none"
  )


ggsave(
  plot = g,
  filename = here::here(
    "geocomputation", "images",
    "population_density_rasters_1.png"
  ),
  height = 1300,
  width = 1300,
  units = "px",
  bg = "white"
)
```

![](images/population_density_rasters_1.png)
