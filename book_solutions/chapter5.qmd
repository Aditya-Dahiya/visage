---
title: "Chapter 5: Geometry operations"
subtitle: "Key Learnings from, and Solutions to the exercises in Chapter 4 of the book Geocomputation with R by Robin Lovelace, Jakub Nowosad and Jannes Muenchow."
date: "2024-12-16"
author: "Aditya Dahiya"
bibliography: references.bib
format:
  html:
    code-fold: false
editor_options: 
  chunk_output_type: console
execute: 
  error: false
  message: false
  warning: false
  eval: true
  cache: false
  collapse: true
categories:
  - "Geocomputation with R"
  - "Textbook Solutions"
comments:
  giscus: 
    repo: Aditya-Dahiya/visage
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/visage/book_solutions/chapter5.html"
  description: "Visualizing Information and Spatial Analysis with ggplot2 Extensions"
  twitter: true
  linkedin: true
  email: true
  mastodon: true
  facebook: true
---

```{r}
#| label: setup

library(sf)        # Simple Features in R
library(terra)     # Handling rasters in R
library(tidyterra) # For plotting rasters in ggplot2
library(magrittr)  # Using pipes with raster objects
library(tidyverse) # All things tidy; Data Wrangling
library(spData)    # Spatial Datasets
```

## 5.1 Introduction

-   Previous chapters introduced geographic datasets' structure (Chapter 2), attribute-based manipulation (Chapter 3), and spatial relations (Chapter 4).
-   Focus of this chapter: Manipulating geographic elements of spatial objects.
    -   Examples: Creating buffers, simplifying/converting vector geometries, and raster aggregation/resampling.
-   Section 5.2: Transforming vector geometries using:
    -   **Unary operations:** Simplifications, buffers, centroids, and affine transformations (Sections 5.2.1–5.2.4).
    -   **Binary operations:** Modifying geometries through clipping and unions (Sections 5.2.5–5.2.7).
    -   **Type transformations:** Converting geometry types, e.g., polygons to lines (Section 5.2.8).
-   Section 5.3: Raster transformations:
    -   Alter pixel size, resolution, extent, and origin.
    -   Align raster datasets for map algebra.

## 5.2 Geometric operations on vector data

-   Focus: Operations that modify the geometry of vector (`sf`) objects.
-   Key distinction: Works directly on geometry-level objects of class `sfc`, in addition to `sf` objects.
-   Examples: Drilling into geometry to transform, simplify, or reshape vector data.

### 5.2.1 Simplification

-   Generalizes vector geometries (lines/polygons) for smaller scale maps, reducing memory, disk space, and bandwidth usage. Useful for publishing interactive maps by simplifying complex geometries.
-   **Key Functions and Algorithms**:
    -   `st_simplify()` from the [sf package](https://r-spatial.github.io/sf/) [@sf-3]:
        -   Implements the Douglas-Peucker algorithm ([Douglas and Peucker 1973](https://doi.org/10.3138/FM57-6770-U75U-7727)).

        -   Controlled by `dTolerance` (generalization level in metres, or map units).

        -   Simplifies individual geometries but does **not preserve topology**, leading to overlaps or holes.

::: callout-note
topology (noun): the way in which parts of something are organized, arranged or connected
:::

-   `ms_simplify()` from the [rmapshaper package](https://github.com/ateucher/rmapshaper) [@rmapshaper]:
    -   Uses the Visvalingam algorithm ([Visvalingam and Whyatt 1993](https://doi.org/10.3138/FM57-6770-U75U-7727)).
    -   Retains topology by default (`keep_shapes = TRUE`) and allows fine control over the vertex retention (`keep`: the % of vertices that are to be retained, given as a proportion).
-   `smooth()` from the [smoothr package](https://cran.r-project.org/package=smoothr):
    -   Smooths edges using techniques like Gaussian kernel regression, Chaikin’s algorithm, or spline interpolation.
    -   Does not reduce vertex count and does not preserve topology.
    -   Key parameter: `smoothness` (controls Gaussian bandwidth).
-   Examples of Simplification are shown in @fig-simplified
-   **Applications of Smoothing**:
    -   Suitable for geometries derived from raster vectorization (e.g., Chapter 6).

```{r}
#| eval: false
#| code-fold: true


# Download India's Official states' map from
# https://github.com/Aditya-Dahiya/projects_presentations/tree/main/data/india_map

#### Base Map
india_states <- read_sf("India_State_Boundary.shp")

g <- india_states |> 
  ggplot() +
  geom_sf() +
  theme_minimal() +
  labs(
    title = "Base Map of India: in full detail",
    subtitle = "Source: Census of India"
  )

ggsave(
  filename = here::here("book_solutions", "images",
                        "ch5-2-1_1.png"),
  plot = g,
  height = 1600,
  width = 1200,
  units = "px"
)

#### st_simplify()
g <- india_states |> 
  st_simplify(dTolerance = 100000) |>    # 100 km tolerance
  ggplot() +
  geom_sf() +
  theme_minimal() +
  labs(
    title = "India: st_simplify(dTolerance = 100000)",
    subtitle = "Douglas-Peucker algorithm. Topology is lost."
  )

ggsave(
  filename = here::here("book_solutions", "images",
                        "ch5-2-1_2.png"),
  plot = g,
  height = 1600,
  width = 1200,
  units = "px"
)

#### rmapshaper::ms_simplify()
g <- india_states |> 
  rmapshaper::ms_simplify(keep = 0.0001, keep_shapes = TRUE) |>    
  ggplot() +
  geom_sf() +
  theme_minimal() +
  labs(
    title = "India: rmapshaper::ms_simplify(keep_shapes = TRUE)",
    subtitle = "Visvalingam algorithm. Topology is retained."
  )

ggsave(
  filename = here::here("book_solutions", "images",
                        "ch5-2-1_3.png"),
  plot = g,
  height = 1600,
  width = 1200,
  units = "px"
)

#### smoothr::smooth() - 3 methods
g <- india_states |> 
  st_simplify(dTolerance = 10000) |>  # To save computing time
  smoothr::smooth(method = "ksmooth",
                  smoothness = 5) |>    
  ggplot() +
  geom_sf() +
  theme_minimal() +
  labs(
    title = "smoothr::smooth(method = \"ksmooth\")",
    subtitle = "Gaussian kernel regression. Topology is lost."
  )

ggsave(
  filename = here::here("book_solutions", "images",
                        "ch5-2-1_4.png"),
  plot = g,
  height = 1600,
  width = 1200,
  units = "px"
)

g <- india_states |> 
  st_simplify(dTolerance = 50000) |>  # To save computing time
  smoothr::smooth(method = "chaikin") |>    
  ggplot() +
  geom_sf() +
  theme_minimal() +
  labs(
    title = "smoothr::smooth(method = \"chaikin\")",
    subtitle = "Chaikin’s corner cutting algorithm. Topology is lost."
  )

ggsave(
  filename = here::here("book_solutions", "images",
                        "ch5-2-1_5.png"),
  plot = g,
  height = 1600,
  width = 1200,
  units = "px"
)

g <- india_states |> 
  st_simplify(dTolerance = 50000) |>  # To save computing time
  smoothr::smooth(method = "spline") |>    
  ggplot() +
  geom_sf() +
  theme_minimal() +
  labs(
    title = "smoothr::smooth(method = \"spline\")",
    subtitle = "Spline interpolation. Topology is lost."
  )

ggsave(
  filename = here::here("book_solutions", "images",
                        "ch5-2-1_6.png"),
  plot = g,
  height = 1600,
  width = 1200,
  units = "px"
)
```

::: {#fig-simplified layout-ncol="2"}
![Official Map of India (full details)](images/ch5-2-1_1.png)

![Using st_simplify(dTolerance = 100000), i.e. 100 km resolution](images/ch5-2-1_2.png)

![Using rmapshaper::ms_simplify(keep_shape = TRUE) to retain topology](images/ch5-2-1_3.png)

![Using gaussian kernel regression with smoothr::smooth(method = "ksmooth")](images/ch5-2-1_4.png)

![Using Chalkin's corner cutting algorithm with smoothr::smooth(method = "chalkin")](images/ch5-2-1_5.png)

![Using spline interpolation with smoothr::smooth(method = "spline")](images/ch5-2-1_6.png)
:::

#### `smoothr`

A short note on the **{smoothr}** package [@smoothr-2], which uses three different types of algorithms:-.

::: callout-note
```{r}
#| label: plot-smoothr
#| eval: false
#| code-fold: true


library(sf)
library(smoothr)
library(tidyverse)

# Smooth polygons using different methods
p_smooth_chaikin <- smooth(jagged_polygons, method = "chaikin")
p_smooth_ksmooth <- smooth(jagged_polygons, method = "ksmooth")
p_smooth_spline <- smooth(jagged_polygons, method = "spline")

# Combine data for plotting
plot_data <- bind_rows(
  mutate(st_as_sf(p_smooth_chaikin), method = "chaikin"),
  mutate(st_as_sf(p_smooth_ksmooth), method = "ksmooth"),
  mutate(st_as_sf(p_smooth_spline), method = "spline"),
  mutate(st_as_sf(jagged_polygons), method = "original")
)

# Assign colors to methods
method_colors <- c(
  chaikin = "#E41A1C",
  ksmooth = "#4DAF4A",
  spline = "#377EB8"
)

# Convert geometry for plotting
plot_data <- plot_data |> 
  mutate(geometry = st_sfc(geometry)) |> 
  st_as_sf()

p2 <- plot_data |> 
  filter(method != "original")

p1 <- plot_data |> 
  filter(method == "original") |> 
  select(-method)

# Plot with ggplot2
g <- ggplot(data = p2) +
  geom_sf(aes(geometry = geometry, 
              color = method),
          size = 0.7,
          linewidth = 0.5,
          fill = "transparent") +
  geom_sf(
    data = p1,
    fill = alpha("grey50", 0.5),
    colour = "transparent"
  ) +
  scale_color_manual(values = method_colors) +
  facet_grid(id ~ method) +
  guides(fill = "none") +
  theme_void() +
  theme(
    legend.position = "none",
    plot.title.position = "plot",
    strip.text.y = element_blank()
    ) +
  labs(
    title = "Simplification with {smoothr}",
    colour = "Method"
  )

ggsave(
  filename = here::here("book_solutions", "images",
                        "ch5-2-1_7.png"),
  plot = g,
  height = 2000,
  width = 1200,
  units = "px"
)
```

![](images/ch5-2-1_7.png)
:::

### 5.2.2 Centroids

-   Identify the center of geographic objects, creating single-point representations of complex geometries using `st_centroid()`

-   **Types of Centroids**: (shown in @fig-5-2-2-1)

    1.  **Geographic Centroid** (center of mass):
        -   Balances a spatial object (like balancing a plate).
        -   Useful for creating simple point representations or estimating distances between polygons.
        -   Calculated with `st_centroid()` from the [sf package](https://r-spatial.github.io/sf/).
        -   Limitation: Centroids may fall outside the object (e.g., doughnut-shaped polygons).
    2.  **Point on Surface**:
        -   Ensures the point lies **within** the object boundaries.
        -   Useful for labeling irregular polygons, such as islands or multipolygon geometries.
        -   Calculated with `st_point_on_surface()`.

-   **Other Centroid Types**: Chebyshev center and visual center

```{r}
#| eval: false
#| code-fold: true

sysfonts::font_add_google("Saira Extra Condensed", "caption_font")
showtext::showtext_auto()

ggplot2::theme_set(
  theme_minimal(
    base_size = 30,
    base_family = "caption_font"
  ) +
    theme(
      text = element_text(
        lineheight = 0.3,
        hjust = 0.5
      ),
      plot.title.position = "plot"
    )
)

# Focussing on the Island Chains of India
andaman <- india_states |> 
  filter(
    State_Name == "Andaman & Nicobar"
  )
  
g1 <- ggplot(andaman) +
  geom_sf() +
  labs(
    title = "Base Map",
    subtitle = "Andaman & Nicobar\nIslands (India)"
  )

g2 <- ggplot() +
  geom_sf(
    data = andaman
    ) +
  geom_sf(
    data = st_centroid(andaman),
    colour = "red",
    size = 4, 
    pch = 1,
    stroke = 2
  ) +
  labs(
    title = "st_centroid()",
    subtitle = "Andaman & Nicobar\nIslands (India)"
  )

g3 <- ggplot() +
  geom_sf(
    data = andaman
    ) +
  geom_sf(
    data = st_centroid(andaman, of_largest_polygon = TRUE),
    colour = "red",
    size = 4, 
    pch = 1,
    stroke = 2,
    fill = "transparent"
  ) +
  labs(
    title = "st_centroid\n(of_largest_polygon = TRUE)",
    subtitle = "Andaman & Nicobar\nIslands (India)"
  )

g4 <- ggplot() +
  geom_sf(
    data = andaman
    ) +
  geom_sf(
    data = st_point_on_surface(andaman),
    colour = "red",
    size = 4, 
    pch = 1,
    stroke = 2,
    fill = "transparent"
  ) +
  labs(
    title = "st_point_on_surface()",
    subtitle = "Andaman & Nicobar\nIslands (India)"
  )

ggsave(
  filename = here::here("book_solutions", 
                        "images", 
                        "chapter5-2-2_1.png"),
  plot = patchwork::wrap_plots(g1, g2, g3, g4, nrow = 1),
  height = 1900,
  width = 2400,
  units = "px"
)
```

![Various centroids using st_centroid() and st_point_on_surface()](images/chapter5-2-2_1.png){#fig-5-2-2-1}

### 5.2.3 Buffers

-   Buffers are **polygons** representing areas within a specified distance from a geometric feature (point, line, or polygon).
-   **Purpose**: Used for geographic **data analysis** (not just visualization). Examples:
    -   How many points are within a given distance of a line?
    -   Which demographic groups are within travel range of a new shop?
-   **`st_buffer()`** from the [sf package](https://r-spatial.github.io/sf/). Example Visualization is shown in @fig-5-2-3-1
    -   **Input**: Geometry and `dist` (distance in CRS units, e.g., meters).
    -   **Output**: **One buffer polygon per geometry feature.**
-   **Other Key Arguments in `st_buffer()`**:
    -   **`nQuadSegs`** (GEOS engine):
        -   Number of segments per quadrant (default: 30).
        -   Adjust: Decrease for memory concerns, or increase for high resolution output.
    -   **`max_cells`** (S2 engine):
        -   Higher values create smoother buffers (slower computation).
    -   **`endCapStyle` and `joinStyle`** (GEOS engine):
        -   Control buffer edge appearance (useful for lines).
    -   **`singleSide`** (GEOS engine):
        -   Buffer on one or both sides of the geometry.

```{r}
#| eval: false
#| code-fold: true

a1 <- andaman |> 
  st_cast("POLYGON")

a2 <- st_buffer(a1, dist = 20000) |> 
  mutate(id = as_factor(row_number()))

a3 <- st_buffer(a1, dist = 20000, nQuadSegs = 0.5) |> 
  mutate(id = as_factor(row_number()))

g1 <- ggplot() +
  geom_sf(data = a1) +
  labs(
    title = "Base Map with\nst_cast(\"POLYGON\")",
    subtitle = "Nicobar Islands"
  ) +
  coord_sf(
    ylim = c(6.5, 9.5),
    default_crs = 4326
  )

g2 <- ggplot() +
  geom_sf(
    data = a2,
    mapping = aes(fill = id),
    alpha = 0.2,
    colour = "transparent"
  ) +
  geom_sf(
    data = a1
  ) +
  labs(
    title = "With 20 km buffer\n around each island",
    subtitle = "Nicobar Islands; each\nbuffer in separate colour"
  ) +
  theme(legend.position = "none") +
  coord_sf(
    ylim = c(6.5, 9.5),
    default_crs = 4326
  )


g3 <- ggplot() +
  geom_sf(
    data = a3,
    mapping = aes(fill = id),
    alpha = 0.2,
    colour = "transparent"
  ) +
  geom_sf(
    data = a1
  ) +
  labs(
    title = "With 20 km buffer\n around each island",
    subtitle = "Nicobar Islands;\narugment (nQuadSegs = 1)"
  ) +
  theme(legend.position = "none") +
  coord_sf(
    ylim = c(6.5, 9.5),
    default_crs = 4326
  )

ggsave(
  filename = here::here("book_solutions", 
                        "images", 
                        "chapter5-2-3_1.png"),
  plot = patchwork::wrap_plots(g1, g2, g3, nrow = 1),
  height = 1200,
  width = 2000,
  units = "px"
)
```

![Use of st_buffer()](images/chapter5-2-3_1.png){#fig-5-2-3-1}

### 5.2.4 Affine Transformations

-   Definition: Transformations that preserve **lines and parallelism** but not necessarily angles or lengths.
-   **Types of Affine Transformations**:
    1.  **Shifting (Translation)**: Moves every point by a constant distance.

        -   Example: Adding a vector to shift all **y-coordinates** north by 400 km distance while keeping **x-coordinates** unchanged using:

            ``` r
            n_shift <- n1 |> 
              add(c(0, 400000)) |> 
              st_set_crs(st_crs(n1))
            ```

        -   *Note: This converts the CRS of the new sfc object to `NA` and thus needs `st_set_crs()` to return it back to the original CRS.*

    2.  **Scaling**: Enlarges or shrinks geometries.

        -   **Global Scaling**:
            -   Multiplies all coordinates relative to the origin, preserving **topological relations**.
        -   **Local Scaling**:
            -   Scales geometries around specific points (e.g., centroids).

            -   Steps:

                1.  Shift geometries so the centroid becomes (0,0).
                2.  Scale by a factor.
                3.  Shift back to original centroid coordinates.

            -   Example: Enlarge the geometries by a factor of 2.5.

                ``` r
                n1_scale <- (n1 - n1_centroid) |> 
                  multiply_by(2.5) |> 
                  add(n1_centroid) |> 
                  st_set_crs(st_crs(n1))
                ```

    3.  **Rotation**: Rotates coordinates using a **rotation matrix**.

        -   Rotation matrix: Define a function to create the rotation matrix and apply it to the geometry. R=\[cosθ/sinθ​ − sinθ/cosθ​\]
-   **Replacing Old Geometry**: Use `st_set_geometry()` from the [sf package](https://r-spatial.github.io/sf/) to finally Replace original geometry with scaled versions (shifted, rotated or scaled)
-   **Applications**:
    -   Shifting: For **label placement**.
    -   Scaling: In non-contiguous cartograms (see [Section 9.6](https://r.geocompx.org/cartograms.html)).
    -   Rotation: Correcting distorted geometries during re-projection.

```{r}
#| eval: false
#| code-fold: true

sysfonts::font_add_google("Saira Extra Condensed", "caption_font")
showtext::showtext_auto()

ggplot2::theme_set(
  theme_minimal(
    base_size = 30,
    base_family = "caption_font"
  ) +
    theme(
      text = element_text(
        lineheight = 0.3,
        hjust = 0.5
      ),
      plot.title.position = "plot",
      plot.title = element_text(hjust = 1),
      plot.subtitle = element_text(hjust = 1),
      panel.grid = element_line(
        linewidth = 0.2
      )
    )
)

df1 <- andaman |> 
  st_cast("POLYGON") |> 
  mutate(id = row_number()) |> 
  filter(id < 10) |> 
  mutate(
    name = case_when(
      id %in% c(4,8, 9, 7) ~ "Nicobar Islands",
      .default = "Andaman Islands"
    )
  )


# Pull out only sfc class (i.e. geometry for Andaman Islands)
a1 <- df1 |> 
  filter(name == "Andaman Islands") |> 
  st_geometry()

# Pull out only sfc class (i.e. geometry for Nicobar Islands)
n1 <- df1 |> 
  filter(name == "Nicobar Islands") |> 
  st_geometry()


g1 <- df1 |> 
  ggplot(aes(fill = name)) +
  geom_sf(colour = "transparent") +
  geom_sf_text(aes(label = id)) +
  coord_sf(
    ylim = c(7, 13.5),
    default_crs = 4326
  ) +
  labs(
    title = "Base Map",
    subtitle = "10 Largest Islands amongst\nAndamand and Nicobar Island chain",
    fill = NULL, x = NULL, y = NULL
  ) +
  scale_fill_manual(values = c("#89973DFF", "#E8B92FFF")) +
  theme(
    legend.position = "left"
  )

g2 <- ggplot() +
  geom_sf(data = a1, fill = "#89973DFF", colour = "transparent") +
  geom_sf(data = n1, fill = "#E8B92FFF", colour = "transparent") +
  coord_sf(
    ylim = c(7, 13.5),
    default_crs = 4326
  ) + 
  labs(
    title = "Plotting as separate\nsfc objects",
    subtitle = "10 Largest Islands"
  )

#################### Shifting #########################

n_shift <- n1 |> 
  add(c(0, 400000)) |> 
  st_set_crs(st_crs(n1))

g3 <- ggplot() +
  geom_sf(data = a1, fill = "#89973DFF", colour = "transparent") +
  geom_sf(
    data = n_shift, 
    fill = "#E8B92FFF", 
    colour = "transparent"
    ) +
  coord_sf(
    ylim = c(7, 13.5),
    default_crs = 4326
  ) +
  labs(
    title = "Shifting sfc objects",
    subtitle = "Bring Nicobar Islands\ncloser to the Andamans"
  )

#################### Scaling ##########################

n1_centroid <- st_centroid(n1)

n1_scale <- (n1 - n1_centroid) |> 
  multiply_by(2.5) |> 
  add(n1_centroid) |> 
  st_set_crs(st_crs(n1))

g4 <- ggplot() +
  geom_sf(data = a1, fill = "#89973DFF", colour = "transparent") +
  geom_sf(
    data = n1_scale, 
    fill = "#E8B92FFF", 
    colour = "transparent"
    ) +
  coord_sf(
    ylim = c(7, 13.5),
    default_crs = 4326
  ) + 
  labs(
    title = "Scaling sfc objects",
    subtitle = "Enlarging Nicobar Islands\nby 2.5 times."
  )

##################### Rotation ########################
rotation = function(a){
  r = a * pi / 180 #degrees to radians
  matrix(c(cos(r), sin(r), -sin(r), cos(r)), nrow = 2, ncol = 2)
} 

n1_rotate <- (n1 - n1_centroid) |> 
  multiply_by(rotation(90)) |> 
  add(n1_centroid) |> 
  st_set_crs(st_crs(n1))


g5 <- ggplot() +
  geom_sf(data = a1, fill = "#89973DFF", colour = "transparent") +
  geom_sf(
    data = n1_rotate, 
    fill = "#E8B92FFF", 
    colour = "transparent"
    ) +
  coord_sf(
    ylim = c(7, 13.5),
    default_crs = 4326
  ) + 
  labs(
    title = "Rotating sfc objects",
    subtitle = "Rotating Nicobar Islands\nclockwise by 90 degrees"
  )

g <- patchwork::wrap_plots(g1, g3, g4, g5) +
  patchwork::plot_layout(widths = c(1,1,1,1,1), nrow = 1)

ggsave(
  filename = here::here("book_solutions", 
                        "images", 
                        "chapter5-2-4_1.png"),
  plot = g,
  height = 1200,
  width = 2500,
  units = "px"
)
```

![](images/chapter5-2-4_1.png)
