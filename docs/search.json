[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visualizing Information and Spatial Analysis with ggplot2 Extensions",
    "section": "",
    "text": "Welcome to V.I.S.A.G.E., a resource for extending ggplot2 and the tidyverse to create stunning visualizations, perform geo-computation, and analyze complex data. Built using R and RStudio, this site demonstrates how packages like sf, various ggplot2 extensions, and other tools in the tidyverse enhance data manipulation and visualization. Explore dynamic graphs, interactive maps, and reproducible workflows built with Quarto to see how modern tools can turn data into insights."
  },
  {
    "objectID": "geocomputation.html",
    "href": "geocomputation.html",
    "title": "Geo-Computation",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nSubtitle\n\n\n\n\n\n\nOct 25, 2024\n\n\n3 types of Cartograms in R with {sf} and {cartogram}\n\n\nCreating Cartograms – contiguous, non-contiguous and packed-circles – in R with {cartogram}, and making non-overlapping text annotations in maps, and custom callouts in Quarto.\n\n\n\n\nOct 20, 2024\n\n\nComputing shortest routes in the sea that avoid land\n\n\nUsing data from Killer Whales encounters in Salish Sea to plot routes of their recorded encounters, and showing those routes that dont intersect land - i.e., removing erroneous data.\n\n\n\n\nOct 17, 2024\n\n\nDriving Directions using Open Street Maps Routing Service\n\n\n \n\n\n\n\nOct 16, 2024\n\n\nCreating Maps in R with ggplot2 having background Raster Images using ggmap\n\n\nLearning how to create maps in R using the {ggmap} package, integrating custom raster base maps with {ggplot2} for geospatial data visualization. This page covers the setup, API authentication, and plotting functions to map data effectively.\n\n\n\n\nOct 15, 2024\n\n\nStarting Document\n\n\n \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Welcome to my little corner of the internet! I’m Dr. Aditya Dahiya, your friendly neighborhood data enthusiast. With an MBBS from AIIMS, New Delhi and a Master of Public Health from Harvard University, I’ve always had a penchant for diving deep into the intricacies of data—and what better way to do that than with ggplot2, its myriad extensions and other open-source packages.\nWhen I’m not navigating the labyrinth of Haryana’s bureaucracy (don’t worry, I have a map!), I channel my experiences as a Fulbright Fellow into making data visualization a captivating storytelling tool. Think of me as your data-wrangling, file-taming, bureaucracy-battling guide with a slightly skewed sense of humor. Need more bureaucratic banter or data insights? Connect with me on LinkedIn or shoot me an email — I promise it won’t be as formal as a government memo!"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\nHarvard University | Boston, MA | MPH in Global Health | Aug 2021 - May 2022\nAll India Institute of Medical Sciences | New Delhi, India | M.B.B.S. | Aug 2005-Dec 2010"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About Me",
    "section": "Experience",
    "text": "Experience\nIndian Administrative Service | Director | Aug 2011 - present\nNeuro-Radiology, AIIMS New Delhi | Junior Resident Doctor | Jan 2011 - Aug 2011"
  },
  {
    "objectID": "geocomputation/ggmap_rasters.html",
    "href": "geocomputation/ggmap_rasters.html",
    "title": "Creating Maps in R with ggplot2 having background Raster Images using ggmap",
    "section": "",
    "text": "On this page, we’ll explore how to create visually appealing maps in R using the ggmap package (ggmap?), a popular extension of ggplot2 designed for easy integration of raster map tiles from online mapping services. Let us see how to set up the required tools and generate maps with custom base layers, using both ggmap and functions like get_stadiamap().\nggmap is an extension of the ggplot2 package that enables users to overlay data on geographic maps. It retrieves raster map tiles from sources such as Google Maps, Stamen Maps, and Stadia Maps, making it easier to create maps and integrate geospatial data visualization with familiar ggplot2 workflows.\nCode\nlibrary(tidyverse)\nlibrary(ggmap)\nlibrary(sf)\n\nsysfonts::font_add_google(\"Saira Condensed\", \"caption_font\")\nsysfonts::font_add_google(\"Saira\", \"body_font\")\nshowtext::showtext_auto()\nAbout the Sample Dataset: The lnd dataset, part of the spData package (Bivand, Nowosad, and Lovelace 2024) in R, contains polygons representing the large administrative boroughs of London. This dataset includes attributes such as the borough name (NAME), official code (GSS_CODE), land area in hectares (HECTARES), and geometry data in the sfc_MULTIPOLYGON format. You can explore the dataset’s source here.\nCode\n# Data on The boroughs of London\nspData::lnd |&gt; \n  ggplot(\n    aes(\n      fill = NAME,\n      label = NAME,\n      size = HECTARES\n    )\n  ) +\n  geom_sf(\n    alpha = 0.75\n  ) +\n  geom_sf_text(\n    check_overlap = TRUE,\n    family = \"caption_font\"\n  ) +\n  coord_sf() +\n  theme_grey() +\n  theme(\n    legend.position = \"none\"\n  )\n\n\n\n\n\n\n\n\nFigure 1: A basic map of the boroughs of London drawn with geom_sf() and data from {spData} plotted using {ggplot2} and geom_sf()"
  },
  {
    "objectID": "geocomputation/ggmap_rasters.html#getting-started-with-ggmap",
    "href": "geocomputation/ggmap_rasters.html#getting-started-with-ggmap",
    "title": "Creating Maps in R with ggplot2 having background Raster Images using ggmap",
    "section": "Getting Started with ggmap",
    "text": "Getting Started with ggmap\nBefore creating maps, you’ll need to install the ggmap package, which is available through CRAN.\ninstall.packages(\"ggmap\")\nTo ensure that you can access map tiles from Stadia Maps, you will need an API key. This key allows you to authenticate and use their map services within your R scripts.\nSetting Up API Key Authentication: To access Stadia Maps, follow these steps:\n\nSign up for a free Stadia Maps account and generate an API key.\nSave the API key securely in your environment using the register_stadiamaps() function.\n\nregister_stadiamaps(\"YOUR-API-KEY-HERE\", write = TRUE)\nBy saving the key in your .Renviron file, you ensure it will automatically load in new R sessions, avoiding the need to hard code it into your script."
  },
  {
    "objectID": "geocomputation/ggmap_rasters.html#retrieving-a-base-map-with-get_stadiamap",
    "href": "geocomputation/ggmap_rasters.html#retrieving-a-base-map-with-get_stadiamap",
    "title": "Creating Maps in R with ggplot2 having background Raster Images using ggmap",
    "section": "Retrieving a Base-map with get_stadiamap()",
    "text": "Retrieving a Base-map with get_stadiamap()\nOnce your API key is set, you can start generating maps using functions such as get_stadiamap() etc. This function allows you to fetch base maps by specifying the bounding box coordinates of your area of interest. The function will return a ggmap object that you can further customize using ggplot2 syntax."
  },
  {
    "objectID": "geocomputation/ggmap_rasters.html#exploring-various-ggmap-functions",
    "href": "geocomputation/ggmap_rasters.html#exploring-various-ggmap-functions",
    "title": "Creating Maps in R with ggplot2 having background Raster Images using ggmap",
    "section": "Exploring various ggmap Functions",
    "text": "Exploring various ggmap Functions\n\nBase functions: get_stadiamap() & ggmap()\nFetches map tiles from Stadia Maps and Stamen Design, after choosing the design from Map Style Library, for a specified bounding box or region and zoom level, and displays them using ggmap(). The various map styles available under the get_stadiamap(maptype = \"your-map-type-here\") argument are: —\n\n\n\n\n\n\n\nMap Type\nDescription\n\n\n\n\nstamen_terrain\nA detailed terrain map highlighting elevation and natural features like hills and rivers.\n\n\nstamen_toner\nA bold, high-contrast map design with stark black-and-white features, ideal for print or urban areas.\n\n\nstamen_toner_lite\nA lighter version of the toner map, providing clearer backgrounds with less emphasis on contrast.\n\n\nstamen_watercolor\nA unique, artistic map style that looks like a watercolor painting, perfect for creative visualizations.\n\n\nstamen_terrain_background\nA terrain map focusing only on the background without labels, useful for overlaying custom data.\n\n\nstamen_toner_background\nA simplified toner map background without labels, ideal for adding data layers on top.\n\n\nstamen_terrain_lines\nTerrain map with added contour lines to emphasize elevation changes.\n\n\nstamen_terrain_labels\nTerrain map that includes place labels, enhancing context for geographic features.\n\n\nstamen_toner_lines\nToner map with a focus on roads and paths, outlined clearly against the background.\n\n\nstamen_toner_labels\nA toner map style with added labels for places, roads, and other key features.\n\n\n\nNote: It is very important is to add the inherit.aes = FALSE argument in geom_sf() if overlaying sf objects on the the {ggmap} raster tiles.\nThe R code below demonstrates how to overlay spatial geometries from sf objects onto raster base maps using ggmap and geom_sf(). The get_stadiamap() function from Stadia Maps is used to fetch raster tiles (specifically with the stamen_toner_lines style) for the London area, which are then transformed into EPSG:3857 (Web Mercator) using a custom function ggmap_bbox() (credits: andyteuchner on stackoverflow post) to ensure the map tiles align correctly with the CRS of the spatial data. The London Boroughs dataset (spData::lnd) is similarly projected to EPSG:3857, and the boroughs are visualized with semi-transparent polygons and labeled with their names using geom_sf() and geom_sf_text(). This approach ensures the raster background and vector geometries are properly aligned.\n\n\nCode\n# Obtain the bounding box of London Boroughs\nlondon_bbox &lt;- sf::st_bbox(spData::lnd)\n\n# A bounding box in the format c(lowerleftlon, lowerleftlat, upperrightlon, upperrightlat)\nlondon_bbox &lt;- c(\n  left = london_bbox$xmin,\n  right = london_bbox$xmax,\n  bottom = london_bbox$ymin,\n  top = london_bbox$ymax\n)\nnames(london_bbox) &lt;- c(\"left\", \"right\", \"bottom\", \"top\")\n\n\n# Getting the map tiles\nlondon_base1 &lt;- get_stadiamap(\n  bbox = london_bbox,\n  zoom = 10,\n  maptype = \"stamen_toner_lines\"\n)\n\nst_crs(london_base1)\n# As we can see the raster images have no CRS system\n# Empirically we know that the coordinate refence system is 3857\n\n# Getting London Boroughs Data\ndf &lt;- spData::lnd |&gt;\n  st_transform(crs = st_crs(3857))\n\n\n# Starting the process of Overlaying the geom_sf() data on this\n# Most important is to add the inherit.aes = FALSE argument.\n\n# Step: 1: \n# Credits: https://stackoverflow.com/questions/47749078/how-to-put-a-geom-sf-produced-map-on-top-of-a-ggmap-produced-raster by andyteucher on StackOverFlow (https://stackoverflow.com/users/1736291/andyteucher)\n\n# Define a function to fix the bbox to be in CRS EPSG:3857\nggmap_bbox &lt;- function(map) {\n  # Extract the bounding box (in lat/lon) from the ggmap\n  # to a numeric vector, and set the names to what\n  # sf::st_bbox expects:\n  map_bbox &lt;- setNames(\n    unlist(attr(map, \"bb\")),\n    c(\"ymin\", \"xmin\", \"ymax\", \"xmax\")\n  )\n\n  # Coonvert the bbox to an sf polygon, transform it to 3857,\n  # and convert back to a bbox (convoluted, but it works)\n  bbox_3857 &lt;- st_bbox(\n    st_transform(\n      st_as_sfc(\n        st_bbox(map_bbox, crs = 4326)\n        ), \n      3857\n    )\n  )\n\n  # Overwrite the bbox of the ggmap object with the transformed coordinates\n  attr(map, \"bb\")$ll.lat &lt;- bbox_3857[\"ymin\"]\n  attr(map, \"bb\")$ll.lon &lt;- bbox_3857[\"xmin\"]\n  attr(map, \"bb\")$ur.lat &lt;- bbox_3857[\"ymax\"]\n  attr(map, \"bb\")$ur.lon &lt;- bbox_3857[\"xmax\"]\n  map\n}\n\n# Use the function to convert our downloaded Raster Files into \n# the new CRS and new bounding box CRS\nlondon_base2 &lt;- ggmap_bbox(london_base1)\n\n# Plotting the actual map\n\n# Starting with base map tiles\ng &lt;- ggmap(london_base2) +\n  \n  # Plotting the actual sf object data on london boroughs\n  geom_sf(\n    data = df,\n    aes(fill = NAME),\n    inherit.aes = FALSE,\n    alpha = 0.5,\n    colour = alpha(\"white\", 0.5)\n  ) +\n  \n  # Plotting names of London Boroughs on top of the geom_sf\n  geom_sf_text(\n    data = df,\n    aes(label = NAME),\n    inherit.aes = FALSE,\n    family = \"caption_font\",\n    fontface = \"bold\",\n    check_overlap = TRUE\n  ) +\n  \n  # Forcing the ggplot2 map to be in CRS: 3857\n  coord_sf(\n    crs = st_crs(3857)\n  ) +\n  \n  # Some theme elements\n  ggthemes::theme_map() +\n  theme(\n    legend.position = \"none\"\n  )\n\nggsave(\n  filename = here::here(\"geocomputation\", \n                        \"ggmap_rasters\", \n                        \"fig_2.png\"),\n  plot = g\n)\n\n\n\n\n\n\n\n\nFigure 2: “Overlapping a geom_sf() object over and above ggmap raster tiles obtained from Stadia Maps”\n\n\n\n\n\n\nqmplot(): Similar to qplot(), but automatically adds a background map. It simplifies mapping by automatically computing the bounding box.\n\n\nWork-in-Progress: Other ggmap() functions\n\nmake_bbox(): Computes a bounding box for a dataset based on latitude and longitude columns.\ngeom_hdr() and geom_labeldensity2d(): Useful for plotting density and contour maps on top of ggmap layers, commonly used for visualizing spatial data like crime maps.\nget_googlemap(): Retrieves maps from Google Maps by specifying a location and zoom level. Different map types are supported (e.g., satellite, terrain, hybrid).\ngeocode() and revgeocode(): Provides geocoding and reverse geocoding services using Google Maps API to convert addresses to coordinates and vice versa.\nmutate_geocode(): Works like mutate() in dplyr, adding latitude and longitude columns to a data frame based on an address.\ntrek() and route(): Calculates routes between locations using Google’s routing API, which can be plotted as paths on a map using geom_path().\nmapdist(): Computes distances and travel times between multiple locations. It’s vectorized for multiple origin-destination pairs.\nregister_google(): Registers a Google Maps API key for use with the ggmap package, allowing access to various Google Maps services. The key can be saved for future sessions."
  },
  {
    "objectID": "geocomputation/computing_sea_routes.html",
    "href": "geocomputation/computing_sea_routes.html",
    "title": "Computing shortest routes in the sea that avoid land",
    "section": "",
    "text": "Dataset used: This #TidyTuesday dataset comes from the Center for Whale Research (CWR), which monitors Southern Resident killer whales in the Salish Sea, part of the Pacific Northwest. The dataset, scraped by Jadey Ryan and documented here, contains information on encounters from 2017 to 2024. Each encounter involves photographing and identifying individual whales. The data can be accessed via the {orcas} R package and includes variables like encounter duration, location, and pod. While the dataset is mostly tidy, some inconsistencies such as missing values and negative durations remain. | Source | Data.\nHere’s my #TidyTuesday Visualization for this project in Figure 1, and the code used and the visualization webpage.\n\n\n\n\n\n\nFigure 1: This map visualizes the movements of Southern Resident killer whales, with arrows marking the starting and ending points of each recorded encounter. The concentration of arrows within a small area highlights the key regions in the Salish Sea where these encounters occur most frequently. Background map images provided by StadiaMaps.\n\n\n\n\n\nMethod 1: Using {geosphere} and {sf}\n\nStep 1: Loading libraries, getting the data and cleaning it\n\n\nCode\n# Loading the Libraries\nlibrary(tidyverse)       # Data wrangling\nlibrary(sf)              # SF objects\nlibrary(showtext)        # Using google fonts in R\nlibrary(geosphere)       # Spherical trigonometry for geography\n\n# Set fonts for including in all graphics\nfont_add_google(\"Saira Semi Condensed\", \"body_font\")\nfont_add_google(\"Saira Extra Condensed\",\"caption_font\")\nshowtext_auto()\n\n# Load orcas data\norcas &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-10-15/orcas.csv')\n\nsessioninfo::session_info()$packages |&gt; \n  as_tibble() |&gt; \n  dplyr::select(package, \n         version = loadedversion, \n         date, source) |&gt;\n  filter(package %in% .packages()) |&gt; \n  arrange(package) |&gt; \n  janitor::clean_names(\n    case = \"title\"\n  ) |&gt; \n  gt::gt() |&gt; \n  gt::opt_interactive(\n    use_search = TRUE\n  ) |&gt; \n  gtExtras::gt_theme_espn()\n\n\n\n\nTable 1: List of packages used during this analysis and their versions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 2: Clean the data, make it in {sf} format\n\n\nCode\n# A cleaner tibble to use for our visualization\ndf_sf &lt;- orcas |&gt; \n  as_tibble() |&gt;\n  dplyr::select(year, duration, \n         begin_latitude, begin_longitude,\n         end_latitude, end_longitude) |&gt; \n\n  # Convert the duration of encounter into seconds\n  mutate(\n    # remove parenthesis content from duration\n    duration = str_remove(duration, \"\\\\s*\\\\(.*\\\\)\"),\n    \n    # remove the \"s\" for seconds\n    duration = str_extract(duration, \"-?\\\\d+\"),\n    \n    # convert the duration into number\n    duration = as.numeric(duration)\n  ) |&gt; \n  \n  # Remove aberrant observation with durations less than zero\n  filter(duration &gt;= 0) |&gt; \n  \n  # Remove observations with missingness\n  drop_na() |&gt; \n  \n  # Allot an ID number to each finally selected observation\n  mutate(id = row_number()) |&gt; \n  dplyr::relocate(id, .before = everything())\n\n########################################################\n# Get a bounding box on the coordinates of encounters\nbbox_orcas &lt;- bind_rows(\n  \n  # Geometry column of starting coordiantes\n    sf::st_as_sf(\n      df_sf |&gt; dplyr::select(begin_latitude, begin_longitude),\n      coords = c(\"begin_longitude\",\"begin_latitude\"),\n      crs = 'EPSG:4326'\n    ) |&gt;\n    mutate(type = \"start_coords\"),\n    \n\n  # Geometry column of starting coordiantes\n    sf::st_as_sf(\n      df_sf |&gt; dplyr::select(end_latitude, end_longitude),\n      coords = c(\"end_longitude\",\"end_latitude\"),\n      crs = 'EPSG:4326'\n    ) |&gt;\n    mutate(type = \"end_coords\")\n) |&gt; \n  st_bbox()\n\n######################################################\n# Display cleaned data\n\ndf_sf |&gt; \n  gt::gt() |&gt; \n  gt::opt_interactive() |&gt; \n  gtExtras::gt_theme_espn() |&gt; \n  gt::fmt_number(\n    columns = -c(year, id),\n    decimals = 2\n  ) |&gt; \n  gt::tab_header(\n    title = \"Cleaned Data on starting and ending coordinates\",\n    subtitle = \"Recorded Encounters of Orcas (Southern Killer Whales) in the Salish Sea (2017-2024)\"\n  )\n\n\n\n\nTable 2: A table of clean data that shows id, year, duration and starting and ending coordinates of each Killer Whale encounter as an {sf} class column\n\n\n\n\n\n\nCleaned Data on starting and ending coordinates\nRecorded Encounters of Orcas (Southern Killer Whales) in the Salish Sea (2017-2024)\n\n\n\n\n\n\n\n\n\n\n\nStep 3: Computing routes using geosphere::gcIntermediate()\n\n\nCode\n# Technique Credits: https://github.com/xmc811/flightplot/blob/master/R/main.R\n# Credits: Mingchu Xu\n# https://www.linkedin.com/in/mingchu-xu-467a0946/\n# On Twitter: @xmc811\n\nroutes &lt;- geosphere::gcIntermediate(\n  p1 = df_sf |&gt; dplyr::select(begin_longitude, begin_latitude),\n  p2 = df_sf |&gt; dplyr::select(end_longitude, end_latitude),\n  n = 100,\n  addStartEnd = TRUE,\n  sp = TRUE) |&gt; \n  sf::st_as_sf()\n\n# Check whether it works\nggplot() +\n  geom_sf(data = routes)\n\n\n\n\n\n\n\n\nFigure 2: The routes computed by the {geosphere} package’s gcIntermediate() function\n\n\n\n\n\n\n\nStep 4: Getting background maps for the Salish Sea area: USA and Canada\nFor this, we first convert our sf object on Map of USA and Canada, shown in Figure 3 (a) into a SpatVector. In the {terra} package in R, a SpatVector is the main class used to represent and work with vector data in geographic information system (GIS) contexts. A SpatVector can store points, lines, polygons, or any combination of these geometries, along with associated attributes (data linked to these geometries). We can create a SpatVector from:\n\nShapefiles (widely used for vector data in GIS)\nOther vector file formats like GeoJSON, KML, or GPKG.\nR objects such as data frames or matrices that contain coordinate information.\n\nThe reason to create a SpatVector is for performing spatial operations like buffering, intersecting, or spatial joins.The terra::vect() is the method to create these objects from various file formats or other R objects.\nThen, we use the terra::crop() to crop USA and Canada map to a specified geographic extent Figure 3 (b) defined by bounding box of the sf objects of orcas created in previous step. When applied to a SpatVector object (vector data), terra::crop() trims the geometries (points, lines, or polygons) so that only the portions within a specified spatial extent remain. Lastly, we re-convert the cropped SpatVector back into an sf object, shown in ?@fig-basemap1-3\n\n\nCode\n# Extract country borders data\nbase_map &lt;- rgeoboundaries::gb_adm0(country = c(\"USA\", \"Canada\")) %&gt;% \n  rmapshaper::ms_simplify(0.5)\n\n# checking the size\n# object.size(base_map) |&gt; print(units = \"Mb\")\n# 4.3 Mb\n\nggplot(base_map) +\n  geom_sf() +\n  coord_sf(\n    crs = usmap::usmap_crs()\n  )\n\nsea &lt;- terra::crop(terra::vect(base_map), bbox_orcas)\n\n# Finally, reconvert the Cropped area back into an sf object\nsea_sf &lt;- sea |&gt; \n  st_as_sf()\n\nggplot(sea_sf) +\n  geom_sf()\n\n\n\n\n\n\n\n\n\n\n\n(a) Map of entire USA and Canada from {rgeoboundaries}\n\n\n\n\n\n\n\n\n\n\n\n(b) Using the terra::crop() from {terra} to focus on Salish Sea area. The Salish Sea area plotted as an sf object\n\n\n\n\n\n\nFigure 3: Background Map of the Salish Sea Area in 2 steps: (4.1) Getting map of USA and Canada from {rgeoboundaries}, and (4.2) Cropping out the map of Salish Sea area\n\n\n\n\n\n\nStep 5: Computing and Removing routes intersecting with land (i.e., erroneous data)\n\n\nCode\n# Test if path is only sea. Each logical test if for each ID in the \n# df1 tibble\ntest_intersect &lt;- lengths(\n  st_intersects(\n    st_transform(routes, st_crs(base_map)), base_map\n  )\n) &gt; 0\n\n# Compute distance for each \ndist_encounter &lt;- st_length(routes)\n\n# Create a second tibble of distance & paths for each encounter\ndf_routes &lt;- routes |&gt; \n  st_transform(st_crs(base_map)) |&gt; \n  bind_cols(id = df_sf$id) |&gt; \n  bind_cols(whether_intersect_land = test_intersect) |&gt; \n  bind_cols(dist_encounter = as.numeric(dist_encounter)) |&gt; \n  left_join(df_sf |&gt; dplyr::select(year, id, duration)) |&gt; \n  mutate(speed = dist_encounter / duration)\n  \n# A vector of IDs whose paths dont intersect land\nids_to_plot &lt;- df_routes |&gt; \n  filter(whether_intersect_land == FALSE) |&gt; \n  pull(id)\n\ndf_routes |&gt; \n  dplyr::relocate(geometry, .after = everything()) |&gt; \n  gt::gt() |&gt; \n  # gt::cols_hide(geometry) |&gt; \n  gt::fmt_number(\n    columns = c(dist_encounter, speed),\n    decimals = 1\n  ) |&gt; \n  gt::fmt(\n    columns = geometry,\n    fns = function(x) {str_sub(x, 1, 20)}\n  ) |&gt; \n  gt::opt_interactive() |&gt; \n  gtExtras::gt_theme_espn()\n\n\n\n\nTable 3: A table of intersecting and non-intersecting routes\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 6: Plotting the non-intersecting routes in Figure 4\n\n\nCode\n# ggmap::register_stadiamaps(\"YOUR-KEY-HERE\")\n\nbbox_stadiamap &lt;- c(left = bbox_orcas[\"xmin\"],\n  right = bbox_orcas[\"xmax\"],\n  top = bbox_orcas[\"ymax\"],\n  bottom = bbox_orcas[\"ymin\"])\nnames(bbox_stadiamap) &lt;- c(\"left\", \"right\", \"top\", \"bottom\")\n\n# Getting the Stamen Maps for the background tiles as raster\nstamen_tiles_lowres &lt;- ggmap::get_stadiamap(\n   bbox_stadiamap,\n   zoom = 8,\n   maptype = \"stamen_terrain\"\n)\n\n# Step: 1: \n# Credits: https://stackoverflow.com/questions/47749078/how-to-put-a-geom-sf-produced-map-on-top-of-a-ggmap-produced-raster by andyteucher on StackOverFlow (https://stackoverflow.com/users/1736291/andyteucher)\n\n# Define a function to fix the bbox to be in CRS EPSG:3857\nggmap_bbox &lt;- function(map) {\n  # Extract the bounding box (in lat/lon) from the ggmap\n  # to a numeric vector, and set the names to what\n  # sf::st_bbox expects:\n  map_bbox &lt;- setNames(\n    unlist(attr(map, \"bb\")),\n    c(\"ymin\", \"xmin\", \"ymax\", \"xmax\")\n  )\n\n  # Coonvert the bbox to an sf polygon, transform it to 3857,\n  # and convert back to a bbox (convoluted, but it works)\n  bbox_3857 &lt;- st_bbox(\n    st_transform(\n      st_as_sfc(\n        st_bbox(map_bbox, crs = 4326)\n        ), \n      3857\n    )\n  )\n\n  # Overwrite the bbox of the ggmap object with the transformed coordinates\n  attr(map, \"bb\")$ll.lat &lt;- bbox_3857[\"ymin\"]\n  attr(map, \"bb\")$ll.lon &lt;- bbox_3857[\"xmin\"]\n  attr(map, \"bb\")$ur.lat &lt;- bbox_3857[\"ymax\"]\n  attr(map, \"bb\")$ur.lon &lt;- bbox_3857[\"xmax\"]\n  map\n}\n\n# Use the function to convert our downloaded Raster Files into \n# the new CRS and new bounding box CRS\nstamen_tiles_lowres2 &lt;- ggmap_bbox(stamen_tiles_lowres)\n\ng &lt;- ggmap::ggmap(stamen_tiles_lowres2) +\n  geom_sf(\n    data = df_routes |&gt; \n            filter(!whether_intersect_land) |&gt; \n            st_transform(crs = 3857),\n    mapping = aes(\n      geometry = geometry\n    ),\n    color = \"grey10\",\n    alpha = 0.5,\n    inherit.aes = FALSE,\n    arrow = arrow(\n      angle = 20,\n      length = unit(0.5, \"mm\")\n    ),\n    linewidth = 0.2\n  ) +\n  coord_sf(\n    expand = F\n  ) +\n  labs(\n    x = \"Longitude\", y = \"Latitude\"\n  ) +\n  theme_minimal()\n\nggsave(\n  plot = g,\n  filename = here::here(\"geocomputation\", \"images\", \"computing_sea_routes_1.png\"),\n  width = 900,\n  height = 700,\n  units = \"px\",\n  bg = \"white\"\n)\n\n\n\n\n\n\n\n\nFigure 4: This map visualizes the movements of Southern Resident killer whales, with arrows marking the starting and ending points of each recorded encounter. The concentration of arrows within a small area highlights the key regions in the Salish Sea where these encounters occur most frequently. Background map images provided by StadiaMaps.\n\n\n\n\n\n\n\nMethod 2: Using raster and gdistance package\nThe following code for computing sea routes is inspired from Code by Benjamin Nowak hosted on GitHub as a part of #TidyTuesday visualizations.\n\nStep 1: Getting the data and cleaning it\nThe packages used in this analysis are shown in the Table 4\n\n\nCode\n# Loading the Libraries\nlibrary(tidyverse)       # Data wrangling\nlibrary(rgeoboundaries)  # Getting country & admin boundaries.\nlibrary(rmapshaper)      # For multi-polygon simplification\nlibrary(sf)              # SF objects\nlibrary(terra)           # Spatial data analysis\nlibrary(tidyterra)       # Tidyverse methods for terra objects\nlibrary(gdistance)       # Distances and Routes on Geographical Grids\nlibrary(showtext)        # Using google fonts in R\n\n# Set fonts for including in all graphics\nfont_add_google(\"Saira Semi Condensed\", \"body_font\")\nfont_add_google(\"Saira Extra Condensed\",\"caption_font\")\nshowtext_auto()\n\n# Load orcas data\norcas &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-10-15/orcas.csv')\n\nsessioninfo::session_info()$packages |&gt; \n  as_tibble() |&gt; \n  dplyr::select(package, \n         version = loadedversion, \n         date, source) |&gt; \n  filter(package %in% .packages()) |&gt; \n  arrange(package) |&gt; \n  janitor::clean_names(\n    case = \"title\"\n  ) |&gt; \n  gt::gt() |&gt; \n  gt::opt_interactive(\n    use_search = TRUE\n  ) |&gt; \n  gtExtras::gt_theme_espn()\n\n\n\n\nTable 4: List of packages used during this analysis and their versions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 2: Clean the data\n\n\nCode\n# A cleaner tibble to use for our visualization\ndf1 &lt;- orcas |&gt; \n  as_tibble() |&gt;\n  dplyr::select(year, duration, \n         begin_latitude, begin_longitude,\n         end_latitude, end_longitude) |&gt; \n\n  # Convert the duration of encounter into seconds\n  mutate(\n    # remove parenthesis content from duration\n    duration = str_remove(duration, \"\\\\s*\\\\(.*\\\\)\"),\n    \n    # remove the \"s\" for seconds\n    duration = str_extract(duration, \"-?\\\\d+\"),\n    \n    # convert the duration into number\n    duration = as.numeric(duration)\n  ) |&gt; \n  \n  # Remove aberrant observation with durations less than zero\n  filter(duration &gt;= 0) |&gt; \n  \n  # Remove observations with missingness\n  drop_na() |&gt; \n  \n  # Allot an ID number to each finally selected observation\n  mutate(id = row_number()) |&gt; \n  dplyr::relocate(id, .before = everything())\n\ndf1 |&gt; \n  gt::gt() |&gt; \n  gt::opt_interactive() |&gt; \n  gtExtras::gt_theme_espn() |&gt; \n  gt::fmt_number(\n    columns = -c(year, id),\n    decimals = 2\n  )\n\n\n\n\nTable 5: A table of clean data that shows id, year, duration and starting and ending coordinates of each Killer Whale encounter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 3: Creating data is specific formats needed by {sf} {terra}\n\n\nCode\n# The starting Coordinates as an sf object\nstart_coordinates &lt;- df1 |&gt; \n  dplyr::select(id, begin_latitude, begin_longitude) |&gt; \n  sf::st_as_sf(\n    coords = c(\"begin_longitude\",\"begin_latitude\"),\n    crs = 'EPSG:4326'\n  ) |&gt; \n  mutate(type = \"start\")\n\n# The ending Coordinates as an sf object  \nend_coordinates &lt;- df1 |&gt; \n  dplyr::select(id, end_latitude, end_longitude) |&gt; \n  sf::st_as_sf(\n    coords = c(\"end_longitude\",\"end_latitude\"),\n    crs = 'EPSG:4326'\n  ) |&gt; \n  mutate(type = \"end\")\n\n# Compiling starting and ending coordinates into a tibble\norcas_sf &lt;- start_coordinates |&gt; \n  bind_rows(end_coordinates)\n\n# Extracting the bounding box of that tibble to get our map\nbb_orcas &lt;- st_bbox(orcas_sf)\n\norcas_sf |&gt; \n  print(n = 10)\n\n\nSimple feature collection with 1168 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -125.6233 ymin: 47.85333 xmax: -122.0445 ymax: 49.55733\nGeodetic CRS:  WGS 84\n# A tibble: 1,168 × 3\n      id             geometry type \n * &lt;int&gt;          &lt;POINT [°]&gt; &lt;chr&gt;\n 1     1  (-124.6925 48.5105) start\n 2     2  (-123.1578 48.4765) start\n 3     3    (-123.2 48.57167) start\n 4     4 (-123.3367 49.09267) start\n 5     5 (-123.0368 48.79683) start\n 6     6 (-122.9295 48.43633) start\n 7     7 (-123.8992 48.84733) start\n 8     8  (-123.592 48.02783) start\n 9     9    (-123.4358 48.87) start\n10    10 (-123.3302 48.80333) start\n# ℹ 1,158 more rows\n\n\n\n\nStep 4: Getting background maps for the Salish Sea area: USA and Canada\nFor description of the actions performed, please see Step 4 of the Method 1 above.\n\n\nCode\n# Extract country borders data\nbase_map &lt;- rgeoboundaries::gb_adm0(country = c(\"USA\", \"Canada\")) %&gt;% \n  rmapshaper::ms_simplify(0.5)\n\n# checking the size\n# object.size(base_map) |&gt; print(units = \"Mb\")\n# 4.3 Mb\n\nggplot(base_map) +\n  geom_sf() +\n  coord_sf(\n    crs = usmap::usmap_crs()\n  )\n\nsea &lt;- terra::crop(terra::vect(base_map), bb_orcas)\n\nggplot(sea) +\n  geom_sf()\n\n# Finally, reconvert the Cropped area back into an sf object\nsea_sf &lt;- sea |&gt; \n  st_as_sf()\n\nggplot(sea_sf) +\n  geom_sf()\n\n\n\n\n\n\n\n\n\n\n\n(a) Map of entire USA and Canada from {rgeoboundaries}\n\n\n\n\n\n\n\n\n\n\n\n(b) Using the terra::crop() from {terra} to focus on Salish Sea area\n\n\n\n\n\n\n\n\n\n\n\n(c) The same Salish Sea area plotted as an sf object\n\n\n\n\n\n\nFigure 5: Background Map of the Salish Sea Area in 2 steps: (4.1) Getting map of USA and Canada from {rgeoboundaries}, and (4.2) Cropping out the map of Salish Sea area\n\n\n\n\n\n\nStep 5: Converting into rasters to plot compute distances and intersections\nterra::rast() function is used to create a raster object or load an existing raster dataset (e.g., GeoTIFF, ASCII, or other raster formats). A raster is a grid of cells (pixels) where each cell has a value representing information such as elevation, temperature, land cover, etc. We use it here to Create an empty raster, defining the number of rows, columns, extent, and coordinate reference system (CRS) to create a raster template.\nterra::rasterize() function is then used to convert vector data (points, lines, polygons) into raster format. This process assigns values from vector geometries to raster cells, typically based on whether the geometries overlap with the cells or using attributes from the vector data. For example, here we are Rasterizing polygons: i.e., for each land types: USA, Canada or other, we can rasterize it so that each raster cell represents one of these three.\n\n\nCode\n# Convert vector to raster and set highly diffferent pixel values based on whether an area is sea or land (i.e. not sea)\n\n# Step 5.1: Generate an empty raster defining the resolution by\n#           number of rows and columns, and a CRS from sea_sf\nr &lt;- terra::rast(sea_sf, ncols = 500, nrows = 500)\n\nggplot() +\n  geom_spatraster(data = r)\n\nrr &lt;- terra::rasterize(sea_sf, r, \"shapeISO\") %&gt;%\n  mutate(shapeISO = case_when(\n    shapeISO %in% c('CAN', 'USA') ~ 1,  # assign value 1 to land\n    TRUE ~ 1000                         # assign value 1000 to sea\n  ))\n\nggplot() +\n  geom_spatraster(data = rr)\n\n\n\n\n\n\n\n\nFigure 6: The empty raster of 500 X 500 created using terra::rast()\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: The raster is enhanced by adding the polygons data from the salish sea area map we cropped in the last step.\n\n\n\n\n\n\n\nStep 6: Computing the distance between starting and ending coordinates\n\nThe gdistance::transition() function is used to create a transition matrix from raster data. The Transition Matrix is a sparse matrix where each element represents the movement “cost” or “resistance” from one cell to its neighboring cells. The transition matrix enables the calculation of the most efficient path (e.g., the least-cost path) from one location to another. Thus, it is used for calculating least-cost paths, commute distances, and other kinds of spatial movement analyses.\nThe transition matrix helps in Movement Modeling: It is used to model movement across a landscape, such as wildlife migration, water flow, or human navigation, where each raster cell’s value might represent an obstacle or ease of travel. Note that we had assigned different value to land and sea raster points.\nAfter creating a transition layer using gdistance::transition(), the gdistance::geoCorrection() function is used to apply geographic corrections to account for the varying distances between raster cells due to the curvature of the Earth or grid layout. This step is crucial when working with spatial data in a geographic coordinate system (e.g., latitude and longitude) where distances between cells are not uniform.\nThe gdistance::shortestPath() is then used to compute the shortest (or least-cost) path between two points on a raster grid, based on a transition matrix that describes the “cost” or “resistance” of moving from one cell to another. The function calculates this path by minimizing the total cost or resistance, taking into account the values in the transition matrix, which typically represent the difficulty or ease of moving through each cell.\n\n\n\nCode\n# For quick rendering of this .qmd file, I have not evaluated \n# this chunk of code, and rather saved the results of \"distance\"\n# as an .rds file and reloaded it.\n\n# Compute transition matrix from raster pixels\nr_trans &lt;- gdistance::transition(\n  x = raster(rr), \n  transitionFunction = mean, \n  directions = 16\n)\n# object.size(r_trans) |&gt; print(units = \"Mb\")\n# 24.7 Mb\n\nr_trans &lt;- geoCorrection(r_trans)\n# object.size(r_trans) |&gt; print(units = \"Mb\")\n# 24.7 Mb\n\n# Compute the shortest path between start and end for the \n# first line of the transition matrix, and convert into sf object:\n\ndistance &lt;- gdistance::shortestPath(\n  r_trans, \n  c(df1 |&gt; filter(id == 1) |&gt; pull(begin_longitude),\n    df1 |&gt; filter(id == 1) |&gt; pull(begin_latitude)), \n  c(df1 |&gt; filter(id == 1) |&gt; pull(end_longitude),\n    df1 |&gt; filter(id == 1) |&gt; pull(end_latitude)), \n  output = \"SpatialLines\"\n) |&gt; \n  st_as_sf()\n\n# Repeat the process for the other points / IDs\nfor (i in 2:nrow(df1)) {\n  \n  temp &lt;- gdistance::shortestPath(\n  r_trans, \n  c(df1 |&gt; filter(id == i) |&gt; pull(begin_longitude),\n    df1 |&gt; filter(id == i) |&gt; pull(begin_latitude)), \n  c(df1 |&gt; filter(id == i) |&gt; pull(end_longitude),\n    df1 |&gt; filter(id == i) |&gt; pull(end_latitude)), \n  output = \"SpatialLines\"\n) |&gt; \n  st_as_sf()\n  \n  distance &lt;- distance |&gt; \n    bind_rows(temp)\n\n}\n\n# Add a CRS to the newly created sf object \ndistance &lt;- distance |&gt; \n  st_set_crs(st_crs(base_map))\n\nsaveRDS(distance, file = here::here(\"data\", \"orcas_distance.rds\"))\n\n\n\n\nCode\ndistance &lt;- readRDS(here::here(\"data\", \"orcas_distance.rds\"))\n\n# Displaying the shortest paths\nggplot() +\n  \n  geom_sf(\n    data = sea_sf, \n    alpha = 0.75, \n    fill = \"#725428\") +\n\n  geom_sf(\n    data = distance\n  ) +\n  coord_sf(expand = FALSE) +\n  \n  theme(\n    panel.background = element_rect(fill = \"#b6e3db\")\n  )\n\n\n\n\n\n\n\n\nFigure 8: The shortest paths computed using {gdistance} show us that many of them are passing over land - these seem to be errors in the data\n\n\n\n\n\n\n\nStep 7: Check whether paths intersect land, and retain only non-intersecting routes\nThe sf::st_intersects() function is used to determine whether two spatial geometries intersect. It checks if any part of one geometry touches or overlaps with another.\nThe sf::st_length() function is then used to calculate the length of geometries represented in sf (simple features) objects. It returns the length of each geometry in the specified unit of measurement.\n\n\nCode\n# Test if path is only sea. Each logical test if for each ID in the \n# df1 tibble\ntest_intersect &lt;- lengths(st_intersects(distance, base_map)) &gt; 0\n\n# Compute distance for each \ndist_encounter &lt;- st_length(distance)\n\n# Create a second tibble of distance & paths for each encounter\ndf2 &lt;- distance |&gt; \n  bind_cols(id = start_coordinates$id) |&gt; \n  bind_cols(whether_intersect_land = test_intersect) |&gt; \n  bind_cols(dist_encounter = as.numeric(dist_encounter)) |&gt; \n  left_join(df1 |&gt; dplyr::select(year, id, duration)) |&gt; \n  mutate(speed = dist_encounter / duration)\n  \n# A vector of IDs whose paths dont intersect land\nids_to_plot &lt;- df2 |&gt; \n  filter(whether_intersect_land == FALSE) |&gt; \n  pull(id)\n\ndf2 |&gt; \n  dplyr::relocate(geometry, .after = everything()) |&gt; \n  slice_head(n = 10) |&gt; \n  mutate(geometry = as.character(geometry)) |&gt; \n  gt::gt() |&gt; \n  # gt::cols_hide(geometry) |&gt; \n  gt::fmt_number(\n    columns = c(dist_encounter, speed),\n    decimals = 2\n  ) |&gt; \n  gt::fmt(\n    columns = geometry,\n    fns = function(x) {str_sub(x, 1, 50)}\n  )\n\n\n\n\n\n\n\n\nid\nwhether_intersect_land\ndist_encounter\nyear\nduration\nspeed\ngeometry\n\n\n\n\n1\nFALSE\n12,981.52\n2024\n5580\n2.33\nc(-124.689260978699, -124.703576316833, -124.71789\n\n\n2\nFALSE\n757.91\n2024\n2460\n0.31\nc(-123.157519798279, -123.157519798279, -123.15751\n\n\n3\nFALSE\n1,845.91\n2024\n9900\n0.19\nc(-123.200465812683, -123.193308143616, -123.18615\n\n\n4\nFALSE\n11,256.39\n2024\n5460\n2.06\nc(-123.336461524963, -123.336461524963, -123.33646\n\n\n5\nFALSE\n6,932.37\n2024\n2460\n2.82\nc(-123.035839424133, -123.035839424133, -123.03583\n\n\n6\nFALSE\n11,305.02\n2024\n6300\n1.79\nc(-122.928474388123, -122.921316719055, -122.91415\n\n\n7\nTRUE\n7,742.05\n2024\n6360\n1.22\nc(-123.901917381287, -123.901917381287, -123.90191\n\n\n8\nTRUE\n130,922.24\n2024\n2340\n55.95\nc(-123.594137611389, -123.594137611389, -123.59413\n\n\n9\nFALSE\n7,738.62\n2024\n3900\n1.98\nc(-123.436668891907, -123.443826560974, -123.45098\n\n\n10\nFALSE\n2,816.18\n2024\n840\n3.35\nc(-123.329303855896, -123.329303855896, -123.32930\n\n\n\n\n\n\n\n\n\nStep 8: Plotting the final routes with ggplot2\n\n\nCode\nland &lt;- \"#725428\"\nsea &lt;- \"#b6e3db\"\norc &lt;- \"grey10\"\n\nggplot() +\n  geom_sf(\n    data = sea_sf,\n    mapping = aes(geometry = geometry),\n    fill = land, color = NA,\n    alpha = 0.9\n  ) +\n  geom_sf(\n    df2 |&gt; filter(!whether_intersect_land),\n    mapping = aes(\n      alpha = speed,\n      geometry = geometry\n    ),\n    color = orc\n  ) + \n  coord_sf(\n    expand = F\n  ) +\n  scale_alpha(range = c(0.5, 0.9)) +\n  guides(alpha = \"none\") +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = sea, color = NA)\n  )\n\n\n\n\n\n\n\n\nFigure 9: The final map with routes shown that don’t intersect land. The alpha (transparency) of each route is mapped to speed."
  },
  {
    "objectID": "geocomputation/osm_driving_directions.html",
    "href": "geocomputation/osm_driving_directions.html",
    "title": "Driving Directions using Open Street Maps Routing Service",
    "section": "",
    "text": "Inspired from the tutorial from Andrew Heiss, titled “How to make fancy road trip maps with R and OpenStreetMap”."
  },
  {
    "objectID": "geocomputation/cartogram_types.html",
    "href": "geocomputation/cartogram_types.html",
    "title": "3 types of Cartograms in R with {sf} and {cartogram}",
    "section": "",
    "text": "Introduction\nOn this webpage, we’ll explore how to create cartograms in R, using population data from the CIA World Factbook. Cartograms are a unique type of thematic map that reshape geographic regions to represent data variables rather than their actual geographic area. By resizing areas to reflect variables like population, cartograms reveal spatial patterns and disparities in a more visually striking way, making them a powerful tool for storytelling with data.\nUnlike traditional maps, where region size is based solely on geographical area, cartograms alter these sizes to communicate insights about underlying data trends. This approach offers several advantages: it enhances visualization by making patterns more apparent, communicates complex data to a broad audience effectively, and highlights disparities between regions, drawing attention to areas of interest. Additionally, cartograms facilitate comparative analysis by allowing viewers to easily compare regions resized according to a single variable.\nTo create cartograms in R, we’ll use a combination of packages, including {cartogram} (Jeworutzki 2023)for cartogram-specific functions, {sf} (Pebesma and Bivand 2023) for handling spatial data, {ggplot2} (Wickham 2016) for flexible mapping and plotting, and {tidyverse} (Wickham et al. 2019) for streamlined data manipulation. The {cartogram} package provides various cartogram types, including\n\nDorling cartograms (Figure 4) that represent regions as resized circles,\nContiguous area cartograms (Figure 2) that maintain topological relationships between regions, and\nNon-contiguous area cartograms (Figure 3) that allow flexibility in resizing by ignoring boundaries.\n\n\nAbout the Data\nThe dataset used in this tutorial is sourced from the CIA World Factbook, specifically the Country Comparisons from 2014. This resource provides essential statistics on population, area, and other key indicators for 265 global entities. Through the {openintro} and {usdatasets} R packages, we access population metrics that allow us to create cartograms—maps where countries’ sizes are distorted according to population values rather than geographic area. This dataset, which required no additional cleaning, enables the visualization of demographic distributions, highlighting countries’ population density and size in an intuitive way for mapping exercises in R.\n\n\n\n\n\n\nKey Learnings\n\n\n\n\nCreating Cartograms with {cartogram}, such as contiguous, non-contiguous, and Dorling cartograms to visually communicate data through shape transformations.\nCustom Callouts in Quarto with the Custom Callout Extension, which enhances document structure and readability, such as the present call-out.\nRepelling Overlapping Text Labels with {ggrepel} with geom_sf() and geom_sf_text() for improved clarity on maps.\n\n\n\n\n\nStep 1: Getting libraries and raw data\nIn this step, we are setting up our workspace to create a population-based cartogram using data from the CIA World Factbook. We begin by loading essential libraries, including {tidyverse} for data manipulation and visualization, {sf} for handling spatial data, and {cartogram} for creating cartograms. We load the cia_factbook dataset and use the {countrycode} package to add ISO3 country codes for mapping. The world_map object is created using the {rnaturalearth} package, which provides geographic data in sf format. Additionally, we set up custom fonts using {showtext} and define color palettes for filling and labeling countries, enhancing the map’s readability and aesthetic.\n\n\nCode\n# Load essential libraries\nlibrary(tidyverse)         # For data wrangling and visualization\nlibrary(sf)                # For handling spatial objects in R\nlibrary(ggrepel)           # For repelling overlapping labels in plots\nlibrary(cartogram)         # For creating different types of cartograms\nlibrary(showtext)          # For using custom Google Fonts in plots\n\n# Load and prepare the CIA Factbook data\ncia_data &lt;- openintro::cia_factbook |&gt; \n  mutate(\n    # Convert country names to ISO3 codes for easy matching with \n    # Geographical Maps data\n    iso_a3 = countrycode::countrycode(country, \"country.name\", \"iso3c\") \n  )\n\n# Retrieve the world map data\nworld_map &lt;- rnaturalearth::ne_countries(\n  scale = \"small\",      # Use small scale for manageable detail\n  returnclass = \"sf\"    # Return as an 'sf' object for spatial handling\n  )\n\n# Add a custom Google font for captions\nfont_add_google(\"Saira Extra Condensed\", \"caption_font\")\nshowtext_auto()           # Automatically apply custom fonts\n\n# Display the size of the world_map object in KB\n# object.size(world_map) |&gt; print(units = \"Kb\")\n\n# Define colors for country fill and text\n# Fill color palette for countries\nfill_palette &lt;- paletteer::paletteer_d(\"khroma::stratigraphy\")\n\n# Define a darker color palette for text labels\ncolour_palette &lt;- fill_palette |&gt; \n  str_sub(start = 1, end = 7) |&gt;  # Truncate hex codes to 6 characters\n  colorspace::darken(0.5)         # Darken colors by 50% for better contrast\n\n\n\n\nStep 2: Converting the data into a “tidy” tibble.\nIn this code snippet, we refine the world_map data and visualize it in the Mercator projection using the ggplot2 package. We start by selecting relevant columns, grouping by country name, and keeping the entry with the highest population estimate for countries with multiple entries. After joining this map data with the cia_data dataset, we filter out any countries without population data and apply the Pseudo-Mercator projection (CRS 3857) using {sf}’s st_transform() function. Finally, we use ggplot2 to plot the world map with geom_sf() and set a minimal theme and informative title and caption.\n\nCode\n# Filter, join, and transform world map data for plotting\n\nworld_map &lt;- world_map |&gt; \n  select(name, geometry, pop_est, iso_a3) |&gt;      # Select relevant columns\n  group_by(name) |&gt;                               # Group by country name\n  slice_max(order_by = pop_est, n = 1) |&gt;         # Retain country entry with max population estimate\n  left_join(cia_data) |&gt;                          # Join with CIA Factbook data\n  filter(!is.na(population)) |&gt;                   # Filter out entries without population data\n  st_transform(crs = 3857)                        # Transform to Psuedo-Mercator projection (CRS = 3857)\n\n# Print world_map object to the console\nworld_map |&gt; \n  print()\n\n\n\n\nTable 1: The sf object morld map to be used in the susequent analysis\n\n\n\nSimple feature collection with 171 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -20037510 ymin: -7481527 xmax: 20037510 ymax: 18440000\nProjected CRS: WGS 84 / Pseudo-Mercator\n# A tibble: 171 × 15\n# Groups:   name [170]\n   name       pop_est iso_a3                  geometry country   area birth_rate\n * &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;         &lt;MULTIPOLYGON [m]&gt; &lt;fct&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 Afghanist…  3.80e7 AFG    (((7404817 4489796, 7466… Afghan… 6.52e5      38.8 \n 2 Albania     2.85e6 ALB    (((2339940 4989172, 2337… Albania 2.87e4      12.7 \n 3 Algeria     4.31e7 DZA    (((-966743 3173002, -964… Algeria 2.38e6      24.0 \n 4 Angola      3.18e7 AGO    (((1446654 -532848.7, 14… Angola  1.25e6      39.0 \n 5 Argentina   4.49e7 ARG    (((-7640303 -6916018, -7… Argent… 2.78e6      16.9 \n 6 Armenia     2.96e6 ARM    (((5176993 4688866, 5136… Armenia 2.97e4      13.9 \n 7 Australia   2.54e7 AUS    (((16440693 -4984101, 16… Austra… 7.74e6      12.2 \n 8 Austria     8.88e6 AUT    (((1890168 6127425, 1881… Austria 8.39e4       8.76\n 9 Azerbaijan  1.00e7 AZE    (((5165775 5140132, 5197… Azerba… 8.66e4      17.0 \n10 Bahamas     3.89e5 BHS    (((-8792013 3097259, -87… Bahama… 1.39e4      15.6 \n# ℹ 161 more rows\n# ℹ 8 more variables: death_rate &lt;dbl&gt;, infant_mortality_rate &lt;dbl&gt;,\n#   internet_users &lt;dbl&gt;, life_exp_at_birth &lt;dbl&gt;,\n#   maternal_mortality_rate &lt;int&gt;, net_migration_rate &lt;dbl&gt;, population &lt;int&gt;,\n#   population_growth_rate &lt;dbl&gt;\n\n\n\n\n\n\nKey Learning: Using geom_text_repel() in place of geom_text_sf() with stat = \"sf_coordinates\"\nIn this code, we generate two versions of a world map using the Mercator projection (CRS = 3857). The first plot demonstrates how using geom_sf_text() without any adjustment can lead to overlapping labels, particularly in densely populated areas. The second plot corrects this with geom_text_repel() from the {ggrepel} package (Slowikowski 2024), which dynamically adjusts label positions to prevent overlap and improve readability. Each map includes labels based on country name, and the label sizes vary by population, offering a clear contrast between the two approaches for displaying map text labels.\n\n\nCode\n# Plot the transformed world map data with overlapping labels\nggplot(world_map) +\n  \n  # Draws the base map with country shapes\n  geom_sf() +    \n  \n  # Adds country names as labels, without overlap prevention\n  geom_sf_text(\n    mapping = aes(\n      label = country\n    )\n  ) +\n  \n  # Applies a minimal theme for a clean visual layout\n  theme_minimal() +           \n  \n  # Sets title, subtitle, and caption for the plot\n  labs(\n    title = \"World Map: Labels Overlapping when using geom_sf_text()\",\n    subtitle = \"Map in the Mercator Projection (CRS = 3857)\",\n    caption = \"Source: {rnaturalearth} package data retrieved with ne_countries() function\"\n  )\n\n\n# Plot the transformed world map data with repelled labels\nggplot(world_map) +\n  \n  # Draws the base map with country shapes\n  geom_sf() +    \n  \n  # Adds country names as labels with repel effect to prevent overlap\n  geom_text_repel(\n    mapping = aes(\n      label = country,\n      geometry = geometry,\n      size = population\n    ),\n    stat = \"sf_coordinates\",   # Sets the stat for spatial coordinates\n    family = \"caption_font\",   # Sets the font family for labels\n    linewidth = 0.01           # Sets line width for label positioning\n  ) +\n  \n  # Scales the size of labels based on population\n  scale_size_continuous(\n    range = c(3, 7)\n  ) +\n  \n  # Applies a minimal theme for a clean visual layout\n  theme_minimal() +    \n    \n  # Sets title, subtitle, and caption for the plot\n  labs(\n    title = \"World Map: Labels with geom_text_repel() with stat = \\\"sf_coordinates\\\"\",\n    subtitle = \"Map in the Mercator Projection (CRS = 3857)\",\n    caption = \"Source: {rnaturalearth} package data retrieved with ne_countries() function\"\n  ) +\n  \n  # Removes the legend for size\n  theme(\n    legend.position = \"none\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n(a) Basic World Map: With no effort to prevent overlapping of labels\n\n\n\n\n\n\n\n\n\n\n\n(b) Labels Repelled from each other to prevent overlapping, using geom_text_repel() from package {ggrepel}\n\n\n\n\n\n\nFigure 1: A world map drawn in Mercator Projection (CRS 3857) to be used as a base map for creating cartograms in the next step\n\n\n\n\n\n\nStep 3: Converting geometry into Cartograms geometry using {cartogram}\nIn this step, we generate three types of cartograms based on population data, each offering a unique way to represent global population distribution using the {cartogram} package. First, we transform the world map data to the Mercator projection (EPSG 3857), which is the standard projection for web maps. We then create three cartograms:\n\na contiguous cartogram that distorts countries proportionally to population while maintaining geographic adjacency,\na Dorling cartogram that represents each country as a circle sized by population, and\na non-contiguous cartogram that allows countries to resize independently, resulting in more accurate shapes but less geographic continuity.\n\n\n# Transforming the data to different cartogram types based on population\n\n# Create a contiguous cartogram where countries maintain adjacency\nworld_map_cont &lt;- cartogram::cartogram_cont(world_map, \"population\")\n\n# Create a Dorling cartogram where each country is represented by a circle\nworld_map_dorling &lt;- cartogram::cartogram_dorling(world_map, \"population\")\n\n# Create a non-contiguous cartogram where countries resize independently\nworld_map_ncont &lt;- cartogram::cartogram_ncont(world_map, \"population\")\n\n\n\n\nResults\n\nType 1: A Continuous Cartogram\nIn this code, we generate a contiguous cartogram plot, shown in Figure 2, using {ggplot2} and {sf} libraries, with countries sized according to population. The code begins by arranging world_map_cont in descending order of population (so that the countries with larger population are displayed first, while we use the argument check_overlap = TRUE with geom_sf_text(). The cartogram plot is created using geom_sf() for shapes and geom_sf_text() for country labels, with label sizes reflecting population. Manual scales are applied to align fill and text colors with predefined palettes. The plot includes a centered title and minimal theme.\n\n\nCode\n# Arrange the cartogram data by population in descending order\ng &lt;- world_map_cont |&gt; \n  arrange(desc(population)) |&gt; \n\n# Initialize ggplot, mapping fill and color aesthetics to country\n  ggplot(\n    mapping = aes(\n      fill = country,\n      colour = country\n    )\n  ) +\n\n# Add the country shapes without borders\n  geom_sf(\n    colour = \"transparent\"\n  ) +\n\n# Add text labels for each country with size proportional to population\n  geom_sf_text(\n    mapping = aes(\n      label = country,\n      size = population,\n      geometry = geometry\n    ),\n    family = \"caption_font\",\n    fontface = \"bold\",\n    check_overlap = TRUE\n  ) +\n\n# Set continuous scale for text size within a specified range\n  scale_size_continuous(\n    range = c(1, 10)\n  ) +\n\n# Apply manual color scale for fill and outline of countries\n  scale_fill_manual(\n    values = fill_palette\n  ) +\n  scale_colour_manual(\n    values = colour_palette\n  ) +\n\n# Add plot title and remove x and y axis labels\n  labs(\n    x = NULL, y = NULL,\n    title = \"A contiguous Cartogram of countries' population\"\n  ) +\n\n# Apply a minimal theme with custom font and size\n  theme_minimal(\n    base_family = \"caption_font\",\n    base_size = 16\n  ) +\n\n# Customize plot appearance with centered title and invisible legend\n  theme(\n    legend.position = \"none\",\n    panel.grid = element_line(\n      colour = \"grey90\",\n      linetype = 3,\n      linewidth = 0.1\n    ),\n    plot.title = element_text(\n      hjust = 0.5,\n      margin = margin(0,0,0,0, \"mm\"),\n      size = 32\n    ),\n    plot.margin = margin(0,0,0,0, \"mm\")\n  )\n\n# Save the plot as a PNG with defined size and white background\nggsave(\n  plot = g,\n  filename = here::here(\"geocomputation\", \"images\",\n                        \"cartogram_types_1.png\"),\n  height = 900,\n  width = 1200,\n  units = \"px\",\n  bg = \"white\"\n)\n\n\n\n\n\n\n\n\nFigure 2: A World Map Cartogram, with countries sized by population, using data from CIA World Factbook. The contiguous cartogram ensures that neighbousing countries keep touching each other, although shapes are distorted.\n\n\n\n\n\nType 2: A Non-continuous Cartogram\nThe next code chunk generates a non-contiguous cartogram, shown in Figure 3, where countries are resized according to population but maintain their original shapes, making it easier to recognize familiar geographic forms.. It uses two layers of geom_sf() to add the original world map with a grey outline for context and the resized cartogram countries with a semi-transparent overlay. Text labels are added for each country, sized by population, without overlapping.\n\n\nCode\n# Arrange the non-contiguous cartogram data by population in descending order\ng &lt;- world_map_ncont |&gt; \n  arrange(desc(population)) |&gt; \n\n# Initialize ggplot, mapping fill and color aesthetics to country\n  ggplot(\n    mapping = aes(\n      fill = country,\n      colour = country\n    )\n  ) +\n\n# Add the original world map with grey borders and white fill\n  geom_sf(\n    data = world_map,\n    fill = \"white\",\n    colour = \"grey60\",\n    linewidth = 0.1\n  ) +\n\n# Add the non-contiguous cartogram countries with transparency\n  geom_sf(\n    colour = \"transparent\",\n    alpha = 0.75\n  ) +\n\n# Add text labels for each country with size proportional to population\n  geom_sf_text(\n    mapping = aes(\n      label = country,\n      size = population,\n      geometry = geometry\n    ),\n    family = \"caption_font\",\n    fontface = \"bold\",\n    check_overlap = FALSE\n  ) +\n\n# Set continuous scale for text size within a specified range\n  scale_size_continuous(\n    range = c(1, 10)\n  ) +\n\n# Apply manual color scale for fill and outline of countries\n  scale_fill_manual(\n    values = fill_palette\n  ) +\n  scale_colour_manual(\n    values = colour_palette\n  ) +\n\n# Add plot title and remove x and y axis labels\n  labs(\n    x = NULL, y = NULL,\n    title = \"A non-contiguous Cartogram of countries' population - preserves the country shapes\"\n  ) +\n\n# Apply a minimal theme with custom font and size\n  theme_minimal(\n    base_family = \"caption_font\",\n    base_size = 16\n  ) +\n\n# Customize plot appearance with centered title and invisible legend\n  theme(\n    legend.position = \"none\",\n    panel.grid = element_line(\n      colour = \"grey90\",\n      linetype = 3,\n      linewidth = 0.1\n    ),\n    plot.title = element_text(\n      hjust = 0.5,\n      margin = margin(0,0,0,0, \"mm\"),\n      size = 28\n    ),\n    plot.margin = margin(0,0,0,0, \"mm\")\n  )\n\n# Save the plot as a PNG with defined size and white background\nggsave(\n  plot = g,\n  filename = here::here(\"geocomputation\", \"images\",\n                        \"cartogram_types_2.png\"),\n  height = 900,\n  width = 1200,\n  units = \"px\",\n  bg = \"white\"\n)\n\n\n\n\n\n\n\n\nFigure 3: A non-contiguous cartogram of countries population, using data from CIA Factbook, shows that while shapes of countries are preserved, their neighbouring countries don’t touch each others’ borders anymore.\n\n\n\n\n\nType 3: A non-overlapping circles Cartogram\nThis code snippet creates a Dorling cartogram, shown in Figure 4, where countries are represented as non-overlapping circles sized according to their populations. The ggplot function is used to set up the aesthetic mappings for fill and color based on the country. The geom_sf() function is employed to add the circular representations of countries without outlines, while geom_sf_text() adds text labels for each country, sized according to their populations.\n\n\nCode\n# Arrange the Dorling cartogram data by population in descending order\ng &lt;- world_map_dorling |&gt; \n  arrange(desc(population)) |&gt; \n\n# Initialize ggplot, mapping fill and color aesthetics to country\n  ggplot(\n    mapping = aes(\n      fill = country,\n      colour = country\n    )\n  ) +\n\n# Add the non-overlapping circles representing countries\n  geom_sf(\n    colour = \"transparent\"\n  ) +\n\n# Add text labels for each country, sized by population\n  geom_sf_text(\n    mapping = aes(\n      label = country,\n      size = population,\n      geometry = geometry\n    ),\n    family = \"caption_font\",\n    fontface = \"bold\"\n  ) +\n\n# Set continuous scale for text size within a specified range\n  scale_size_continuous(\n    range = c(1, 10)\n  ) +\n\n# Apply manual color scale for fill and Text of countries\n  scale_fill_manual(\n    values = fill_palette\n  ) +\n  scale_colour_manual(\n    values = colour_palette\n  ) +\n\n# Add plot title and remove x and y axis labels\n  labs(\n    x = NULL, y = NULL,\n    title = \"A non-overlapping circles Cartogram of countries' population.\"\n  ) +\n\n# Apply a map theme with custom font and size\n  ggthemes::theme_map(\n    base_family = \"caption_font\",\n    base_size = 16\n  ) +\n\n# Customize plot appearance with centered title and invisible legend\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(\n      hjust = 0.5,\n      margin = margin(0,0,0,0, \"mm\"),\n      size = 28\n    ),\n    plot.margin = margin(0,0,0,0, \"mm\")\n  )\n\n# Save the plot as a PNG with defined size and white background\nggsave(\n  plot = g,\n  filename = here::here(\"geocomputation\", \"images\",\n                        \"cartogram_types_3.png\"),\n  height = 900,\n  width = 1200,\n  units = \"px\",\n  bg = \"white\"\n)\n\n\n\n\n\n\n\n\nFigure 4\n\n\n\n\n\n\n\n\n\nReferences\n\nJeworutzki, Sebastian. 2023. “Cartogram: Create Cartograms with r.” https://CRAN.R-project.org/package=cartogram.\n\n\nPebesma, Edzer, and Roger Bivand. 2023. “Spatial Data Science: With Applications in r.” https://doi.org/10.1201/9780429459016.\n\n\nSlowikowski, Kamil. 2024. “Ggrepel: Automatically Position Non-Overlapping Text Labels with ’Ggplot2’.” https://CRAN.R-project.org/package=ggrepel.\n\n\nWickham, Hadley. 2016. “Ggplot2: Elegant Graphics for Data Analysis.” https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the Tidyverse” 4: 1686. https://doi.org/10.21105/joss.01686."
  }
]